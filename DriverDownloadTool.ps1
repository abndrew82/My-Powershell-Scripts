<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2017 v5.4.134
     Generated on:       08/03/2017 16:00
     Generated by:       Maurice.Daly
	 File Name: 		 DriverDownloadTool.ps1
	 Version:			 2.5
    --------------------------------------------------------------------------------
    .DESCRIPTION
        This script allows you to automate the process of keeping your Dell, Lenovo
		and HP drives packages up to date. The script reads the Dell, Lenovo and HP
		SCCM driver pack site for models you have specified and then downloads
		the corresponding latest driver packs and BIOS updates(Dell only).
		
		The script generates a GUI allowing you to select features such as SCCM or
		MDT import jobs, Operating System, Driver or BIOS downloads etc.
		
		Use : This script is provided as it and I accept no responsibility for any issues arising from its use.
 
		Twitter : @modaly_it
		Blog : http://deployeverything.com
 
		Credits
		MDT Import Script Source - https://scriptimus.wordpress.com/2012/06/18/mdt-powershell-importing-drivers/

		ChangeLog
		
		Version 2.0 Initial Public Release
		Version 2.1 Bug Fixes
		Version 2.2 Changed options for SCCM driver packages - Standard and Driver packages
		Version 2.3 Dell x86 Bug Fix, Added Output for Created Packages & Errors 
		Version 2.4 HP Bug Fix for models with "/" included. Note that the Z440/Z640/Z840
					has issues extracting. This has been raised with HP.
					Text box controls locked.
		Version 2.5	Re-introduced the Dell WMI call for known models as requested.
#>


#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {

	Param ([String]$Commandline)
		
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}

#endregion Source: Startup.pss

#region Source: MainForm.psf
function Show-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		[ProgressBarOverlay] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms', 'System.Drawing') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Drawing;
        namespace SAPIENTypes
        {
		    public class ProgressBarOverlay : System.Windows.Forms.ProgressBar
	        {
                public ProgressBarOverlay() : base() { SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true); }
	            protected override void WndProc(ref Message m)
	            { 
	                base.WndProc(ref m);
	                if (m.Msg == 0x000F)// WM_PAINT
	                {
	                    if (Style != System.Windows.Forms.ProgressBarStyle.Marquee || !string.IsNullOrEmpty(this.Text))
                        {
                            using (Graphics g = this.CreateGraphics())
                            {
                                using (StringFormat stringFormat = new StringFormat(StringFormatFlags.NoWrap))
                                {
                                    stringFormat.Alignment = StringAlignment.Center;
                                    stringFormat.LineAlignment = StringAlignment.Center;
                                    if (!string.IsNullOrEmpty(this.Text))
                                        g.DrawString(this.Text, this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    else
                                    {
                                        int percent = (int)(((double)Value / (double)Maximum) * 100);
                                        g.DrawString(percent.ToString() + "%", this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    }
                                }
                            }
                        }
	                }
	            }
              
                public string TextOverlay
                {
                    get
                    {
                        return base.Text;
                    }
                    set
                    {
                        base.Text = value;
                        Invalidate();
                    }
                }
	        }
        }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$SelectionTabs = New-Object 'System.Windows.Forms.TabControl'
	$OSSelectionTab = New-Object 'System.Windows.Forms.TabPage'
	$textbox2 = New-Object 'System.Windows.Forms.TextBox'
	$label2 = New-Object 'System.Windows.Forms.Label'
	$ArchitectureComboxBox = New-Object 'System.Windows.Forms.ComboBox'
	$DownloadComboBox = New-Object 'System.Windows.Forms.ComboBox'
	$PlatformComboBox = New-Object 'System.Windows.Forms.ComboBox'
	$OSComboBox = New-Object 'System.Windows.Forms.ComboBox'
	$ArchitectureCheckBox = New-Object 'System.Windows.Forms.Label'
	$lSelectDeployLabel = New-Object 'System.Windows.Forms.Label'
	$OperatingSysLabel = New-Object 'System.Windows.Forms.Label'
	$labelDownloadType = New-Object 'System.Windows.Forms.Label'
	$ManufacturerTab = New-Object 'System.Windows.Forms.TabPage'
	$FindModelsButton = New-Object 'System.Windows.Forms.Button'
	$labelPleaseSelectManufact = New-Object 'System.Windows.Forms.Label'
	$LenovoCheckBox = New-Object 'System.Windows.Forms.CheckBox'
	$HPCheckBox = New-Object 'System.Windows.Forms.CheckBox'
	$DellCheckBox = New-Object 'System.Windows.Forms.CheckBox'
	$FullModelListBox = New-Object 'System.Windows.Forms.ListBox'
	$AddToListlButton = New-Object 'System.Windows.Forms.Button'
	$DriverStorageTab = New-Object 'System.Windows.Forms.TabPage'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$labelPleaseNote = New-Object 'System.Windows.Forms.Label'
	$PackagePathTextBox = New-Object 'System.Windows.Forms.TextBox'
	$RepositoryTextBox = New-Object 'System.Windows.Forms.TextBox'
	$PackagePathLabel = New-Object 'System.Windows.Forms.Label'
	$RepositoryLabel = New-Object 'System.Windows.Forms.Label'
	$DriverCleanTab = New-Object 'System.Windows.Forms.TabPage'
	$labelCautionYourTaskSeque = New-Object 'System.Windows.Forms.Label'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$RemoveLegacyDriverCheckbox = New-Object 'System.Windows.Forms.CheckBox'
	$labelSelectingThisOptionW = New-Object 'System.Windows.Forms.Label'
	$CleanUnusedCheckBox = New-Object 'System.Windows.Forms.CheckBox'
	$DeployEverythingcomLink = New-Object 'System.Windows.Forms.LinkLabel'
	$SCCMDellTabControl = New-Object 'System.Windows.Forms.TabControl'
	$SCCMTabPage1 = New-Object 'System.Windows.Forms.TabPage'
	$SiteCodeText = New-Object 'System.Windows.Forms.TextBox'
	$SiteServerInput = New-Object 'System.Windows.Forms.TextBox'
	$ConnectSCCMButton = New-Object 'System.Windows.Forms.Button'
	$SiteCodeLabel = New-Object 'System.Windows.Forms.Label'
	$SiteServerLabel = New-Object 'System.Windows.Forms.Label'
	$SCCMTabPage4 = New-Object 'System.Windows.Forms.TabPage'
	$UseProxyServerCheckbox = New-Object 'System.Windows.Forms.CheckBox'
	$ProxyPswdInput = New-Object 'System.Windows.Forms.TextBox'
	$labelPassword = New-Object 'System.Windows.Forms.Label'
	$ProxyUserInput = New-Object 'System.Windows.Forms.TextBox'
	$labelUsername = New-Object 'System.Windows.Forms.Label'
	$ProxyServerInput = New-Object 'System.Windows.Forms.TextBox'
	$labelProxyServer = New-Object 'System.Windows.Forms.Label'
	$labelThisScriptIsUsedAtYo = New-Object 'System.Windows.Forms.Label'
	$ClearSelectionButton = New-Object 'System.Windows.Forms.Button'
	$ModelProgressOverlay = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$ProgressBar = New-Object 'System.Windows.Forms.ProgressBar'
	$ProgressListBox = New-Object 'System.Windows.Forms.ListBox'
	$AboutToolLabel = New-Object 'System.Windows.Forms.Label'
	$AutomationLabel = New-Object 'System.Windows.Forms.Label'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$ProductListBox = New-Object 'System.Windows.Forms.ListBox'
	$StartDownloadButton = New-Object 'System.Windows.Forms.Button'
	$ModelListBox = New-Object 'System.Windows.Forms.Label'
	$LoggingLabel = New-Object 'System.Windows.Forms.Label'
	$ModelProgressLabel = New-Object 'System.Windows.Forms.Label'
	$OpenMDTFileDialog = New-Object 'System.Windows.Forms.OpenFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$MainForm_Load = {
		
		# Create Log File
		Get-Date -Format F | Out-File -FilePath $LogFile -Append
		Add-Content -Path $LogFile "Logging Running....."
		Add-Content -Path $LogFile " "
		
		# Set SCCM Site Server To Local Machine
		$SiteServerInput.Text = $env:COMPUTERNAME
		
		# Set Temp folder as base location
		Set-Location -Path $env:TEMP
		
		# Check PS Version Compatibilty
		if ($PSVersionTable.PSVersion.Major -lt "3")
		{
			$ProgressListBox.Items.Add("======== COMPATIBILITY ISSUE DETECTED ======== ")
			$ProgressListBox.Items.Add(" ")
			$ProgressListBox.Items.Add("Error: PowerShell Version Incompatible - Please Update PS Installation")
			$ProgressListBox.Items.Add(" ")
		}
	}
	
	$StartDownloadButton_Click = {
		
		# Reset Progress Bar
		$ProgressBar.Value = "0"
		$ModelProgressOverlay.Value = "0"
		
		# Set Variables Retrieved From GUI
		$ImportInto = [string]$PlatformComboBox.SelectedItem
		$DownloadType = [string]$DownloadComboBox.SelectedItem
		$ImportModels = $ProductListBox.SelectedItems
		$SiteCode = $SiteCodeText.Text
		
		# Set Initial Validation State
		$ValidationErrors = 0
		
		# ============ Validation Selection Details and Prerequisites ==============
		
		# Reset Job Process Log Dialog 
		if (($ProgressListBox.ForeColor) -eq "Red") { $ProgressListBox.Items.Clear() }
		
		# Validate Selected Models
		if (($ProductListBox.SelectedItems.Count) -lt "1")
		{
			$ProgressListBox.ForeColor = "Red"
			$ProgressListBox.Items.Add("Error: No Models Selected")
			$ValidationErrors++
			UpdateLogWindow
		}
		
		# Validate Repository Path For BIOS & Driver Downloads
		if ((Test-Path -Path $RepositoryTextBox.Text) -eq $true)
		{
			$RepositoryPath = [string]$RepositoryTextBox.Text
			$ProgressListBox.Items.Add("Pre-Check: Respository Path Set To $RepositoryPath")
			UpdateLogWindow
		}
		else
		{
			$ProgressListBox.ForeColor = "Red"
			$ProgressListBox.Items.Add("Error: UNC Repository Path Specified Could Not Be Found $($RepositoryTextBox.Text)")
			$ValidationErrors++
			UpdateLogWindow
		}
		
		
		
		if ($DownloadComboBox.Text -ne "BIOS")
		{
			# Validate Package Path For SCCM Driver Imports
			if (($ImportInto -like "SCCM*") -or ($ImportInto -like "Both*"))
			{
				if ((Test-Path -path $PackagePathTextBox.Text) -eq $true)
				{
					$PackagePath = [string]$PackagePathTextBox.Text
				}
				else
				{
					$ProgressListBox.ForeColor = "Red"
					$ProgressListBox.Items.Add("Error: UNC Package Path Specified Could Not Be Found $($PackagePathTextBox.Text)")
					$ValidationErrors++
					UpdateLogWindow
				}
			}
			
			# Validate OS Selection
			if (($OSComboBox).SelectedIndex -ne $null)
			{
				$WindowsVersion = ([string]($OSComboBox).SelectedItem).Trim("Windows ")
				UpdateLogWindow
			}
			else
			{
				$ProgressListBox.ForeColor = "Red"
				$ProgressListBox.Items.Add("Error: Operating System Not Specified")
				$ValidationErrors++
				UpdateLogWindow
			}
			
			# Validate OS Architecture Selection
			if (($ArchitectureComboxBox).SelectedItem -ne $null)
			{
				$Architecture = "x" + ([string]$ArchitectureComboxBox.SelectedItem).Trim(" bit")
			}
			else
			{
				$ProgressListBox.ForeColor = "Red"
				$ProgressListBox.Items.Add("Error: Operating System Architecture Not Specified")
				$ValidationErrors++
			}
			
		}
		
		# Set Proxy Variables
		if ($UseProxyServerCheckbox.Checked -eq $true)
		{
			$ProxyUser = [string]$ProxyUserInput.Text
			$ProxyPswd = ConvertTo-SecureString $([string]$ProxyPswdInput.Text) -AsPlainText -Force
			$ProxyServer = [string]$ProxyServerInput.Text
			$ProxyCred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $ProxyUser, $ProxyPswd
			$ProgressListBox.Items.Add("PROXY: Downloading through proxy $ProxyServer ")
			$ProgressListBox.Items.Add(" ")
			$ProxyValidated = $true
			UpdateLogWindow
		}
		
		# Download ScriptBlock
		$DriverDownloadJob = {
			Param ([string]$DriverRepositoryRoot,
				[string]$Model,
				[string]$DriverCab,
				[string]$DriverDownloadURL,
				$ProxyServer,
				$ProxyCred)
			
			# Start Driver Download	
			if ($ProxyCred -gt $null)
			{
				Start-BitsTransfer -DisplayName "$Model-DriverDownload" -Source $DriverDownloadURL -Destination $($DriverRepositoryRoot + $Model + "\Driver Cab\" + $DriverCab) -RetryTimeout 90 -RetryInterval 180 -Asynchronous -ProxyAuthentication NTLM -ProxyCredential $ProxyCred -ProxyUsage SystemDefault -Priority Foreground
			}
			else
			{
				Start-BitsTransfer -DisplayName "$Model-DriverDownload" -Source $DriverDownloadURL -Destination $($DriverRepositoryRoot + $Model + "\Driver Cab\" + $DriverCab) -RetryTimeout 90 -RetryInterval 180 -Asynchronous
			}
			
		}
		
		# MDT Import SriptBlock
		$MDTImportJob = {
			Param ([string]$PSDriveName,
				[string]$MDTDriverPath,
				[string]$Make,
				[string]$Model,
				[string]$DriverRevision,
				[string]$OperatingSystemDir,
				[string]$DriverExtractDest,
				[string]$DeploymentShare,
				[string]$Architecture)
			
			Import-Module "C:\Program Files\Microsoft Deployment Toolkit\bin\MicrosoftDeploymentToolkit.psd1"
			
			New-PSDrive -Name $PSDriveName -PSProvider MDTProvider -Root $DeploymentShare
			
			# =============== MDT Driver Import ====================
			
			if ($Make -eq "Dell")
			{
				$DriverFolder = (Get-ChildItem -Path $DriverExtractDest -Recurse | Where-Object { ($_.PSisContainer -eq $true) -and ($_.Name -eq "$Architecture") } | Select -first 1).FullName
				Import-MDTDriver -path "$MDTDriverPath\$OperatingSystemDir\$Make\$Model\$DriverRevision" -SourcePath "$DriverFolder"
			}
			else
			{
				Import-MDTDriver -path "$MDTDriverPath\$OperatingSystemDir\$Make\$Model\$DriverRevision" -SourcePath "$DriverExtractDest"
			}
			
		}
		
		# Move HP Driver Function
		$MoveHPDrivers = {
			Param ($HPExtract,
				$DriverExtractDest)
			
			Move-Item -Path $HPExtract.FullName -Destination "$DriverExtractDest"
		}
		
		# Copy Drivers To Package Location (Standard)
		$PackageDrivers = {
			Param ($Make,
				$DriverExtractDest,
				$Architecture,
				$DriverPackageDest)
			
			if ($Make -eq "Dell")
			{
				Get-ChildItem -Path "$DriverExtractDest" -Recurse | Where-Object { ($_.PSisContainer -eq $true) -and ($_.Name -eq "$Architecture") } | Copy-Item -Destination "$DriverPackageDest" -Container -Recurse
			}
			else
			{
				Copy-Item -Path "$DriverExtractDest" -Destination "$DriverPackageDest" -Container -Recurse
			}
			
		}
		
		# Validate MDT PowerShell Commandlets / Install 
		if ((($ImportInto) -like ("MDT" -or "Both*")) -and ($ValidationErrors -eq 0))
		{
			# Validate MDT PS Commandlets
			if ((Test-Path -Path $MDTPSCommandlets) -eq $true)
			{
				# Import MDT Module
				$ProgressListBox.Items.Add("Importing: MDT PowerShell Commandlets")
				Import-Module $MDTPSCommandlets
			}
			else
			{
				$ProgressListBox.ForeColor = "Red"
				$ProgressListBox.Items.Add("Error: MDT PowerShell Commandlets file not found at $MDTPSCommandlets")
				$ValidationErrors++
				UpdateLogWindow
			}
		}
		
		If ($ValidationErrors -eq 0)
		{
			# Test Package Path
			$ProgressListBox.Items.Clear()
			$ProgressListBox.ForeColor = "Black"
			$ProgressListBox.Items.Add("======== Starting Download Processes ======== ")
			$ProgressListBox.Items.Add(" ")
			$ProgressListBox.Items.Add("Models selected: $($ProductListBox.SelectedItems)")
			$ProgressListBox.Items.Add("Operating System specified: Windows $($WindowsVersion)")
			$ProgressListBox.Items.Add("Operating System architecture specified: $($Architecture)")
			$ProgressListBox.Items.Add(" ")
			$ProgressListBox.Items.Add("Site Code specified: $($SiteCode)")
			$ProgressListBox.Items.Add("Respository Path specified: $($RepositoryPath)")
			$ProgressListBox.Items.Add("Package Path specified: $($PackagePath)")
			
			# Operating System Version
			$OperatingSystem = ("Windows " + $WindowsVersion)
			$TotalModelCount = $ProductListBox.SelectedItems.Count
			$RemainingModels = $TotalModelCount
			
			# Initialise Job Progress Bar
			$ProgressBar.Maximum = $TotalModelCount
			$ModelProgressOverlay.Maximum = $TotalModelCount
			
			foreach ($Model in $ImportModels)
			{
				# Vendor Make
				$Make = $($Model).split(" ")[0]
				$Model = $($Model).TrimStart("$Make")
				$Model = $Model.Trim()
							
				$ProgressListBox.Items.Add(" ")
				$ProgressListBox.Items.Add("Starting Download,Extract And Import Processes For $Make Model: $($Model)")
				UpdateLogWindow
				
				# =================== DEFINE VARIABLES =====================
				
				# Directory used for driver and BIOS downloads
				$DriverRepositoryRoot = ($RepositoryPath.Trimend("\") + "\$Make\")
				
				# Directory used by SCCM for driver packages
				If ($ImportInto -ne "MDT") { $DriverPackageRoot = ($PackagePath.Trimend("\") + "\$Make\") }
				
				# =================== VENDOR SPECIFIC UPDATES ====================
				
				If ($Make -eq "Dell")
				{
					[xml]$DellModelXML = Get-Content -Path $env:TEMP\$DellXMLFile
					# Set XML Object
					$DellModelXML.GetType().FullName
					$DellModelCabFiles = $DellModelXML.driverpackmanifest.driverpackage
					
					$ModelURL = $DellDownloadBase + "/" + ($DellModelCabFiles | Where-Object { ((($_.SupportedOperatingSystems).OperatingSystem).osCode -like "*$WindowsVersion*") -and ($_.SupportedSystems.Brand.Model.Name -like "*$Model*") }).delta
					$ModelURL = $ModelURL.Replace("\", "/")
					$DriverDownload = $DellDownloadBase + "/" + ($DellModelCabFiles | Where-Object { ((($_.SupportedOperatingSystems).OperatingSystem).osCode -like "*$WindowsVersion*") -and ($_.SupportedSystems.Brand.Model.Name -like "*$Model*") }).path
					$DriverCab = (($DellModelCabFiles | Where-Object { ((($_.SupportedOperatingSystems).OperatingSystem).osCode -like "*$WindowsVersion*") -and ($_.SupportedSystems.Brand.Model.Name -like "*$Model*") }).path).Split("/") | select -Last 1
					
					$DriverRevision = (($DriverCab).Split("-")[2]).Trim(".cab")
				}
				
				if ($Make -eq "HP")
				{
					# Read in HP Model Lists - For Downloading Softpaq's
					[xml]$HPModelXML = Get-Content -Path $env:TEMP\$HPXMLFile
					# Set XML Object
					$HPModelXML.GetType().FullName
					$HPModelSoftPaqs = $HPModelXML.newdataset.hpclientdriverpackcatalog.softpaqlist.softpaq
					$HPSoftPaq = $HPModelSoftPaqs | Where-Object { $_.Name -like "*$Model*$(($OSComboBox.Text).Split(' ')[1])*$(($ArchitectureComboxBox.Text).Trim(' bit'))*" }
					$ModelURL = $HPSoftPaq.URL
					# Replace FTP for HTTP for Bits Transfer Job
					$DriverDownload = "http:" + ($HPSoftPaq.URL).TrimStart("ftp:")
					$DriverCab = $HPSoftPaq.URL | Split-Path -Leaf
					$DriverRevision = $HPSoftPaq.Version
					
				}
				
				if ($Make -eq "Lenovo")
				{
					# Read in Lenovo Model Lists - For Downloading Driver's
					[xml]$LenovoModelXML = (New-Object System.Net.WebClient).DownloadString("$LenovoXMLSource")
					# Set XML Object
					$LenovoModelXML.GetType().FullName
					$LenovoModelDrivers = $LenovoModelXML.Products
					$LenovoDriver = (($LenovoModelDrivers.Product | Where-Object { $_.model -eq $Model }).driverPack | Where-Object { $_.id -eq "SCCM" })."#text"
					
					If ($WindowsVersion -ne "7")
					{
						$ModelURL = (($LenovoModelDrivers.Product | Where-Object { ($_.model -eq "$Model") -and ($_.os -eq "win$(($WindowsVersion).Trim("."))") }).driverPack | Where-Object { $_.id -eq "SCCM" })."#text" | Select -First 1
					}
					else
					{
						$ModelURL = (($LenovoModelDrivers.Product | Where-Object { ($_.model -eq "$Model") -and ($_.os -eq "win$WindowsVersion$(($ArchitectureComboxBox.Text).Split(' ')[0])") }).driverPack | Where-Object { $_.id -eq "SCCM" })."#text" | Select -First 1
					}
					$DriverDownload = FindDriver $ModelURL $Architecture $ProxyServer $ProxyCred
					$DriverCab = $DriverDownload | Split-Path -Leaf
					$DriverRevision = ($DriverCab.Split("_") | Select -Last 1).Trim(".exe")
					
				}
				
				# Driver variables & switches
				$DriverSourceCab = ($DriverRepositoryRoot + $Model + "\Driver Cab\" + $DriverCab)
				$DriverPackageDir = ($DriverCab).Substring(0, $DriverCab.length - 4)
				$DriverCabDest = $DriverPackageRoot + $DriverPackageDir
				
				# Cater for Dell driver packages (both x86 and x64 drivers contained within a single package)
				If ($Make -eq "Dell")
				{
					$DriverExtractDest = ("$DriverRepositoryRoot" + $Model + "\" + "$DriverRevision-Windows$WindowsVersion")
					$DriverPackageDest = ("$DriverPackageRoot" + "$Model" + "-" + "$DriverRevision-Windows$WindowsVersion-$Architecture")
				}
				else
				{
					$DriverExtractDest = ("$DriverRepositoryRoot" + $Model + "\" + "$DriverRevision-Windows$WindowsVersion-$Architecture")
					$DriverPackageDest = ("$DriverPackageRoot" + "$Model" + "\" + "$DriverRevision-Windows$WindowsVersion-$Architecture")
					# Replace HP Model Slash
					$DriverExtractDest = $DriverExtractDest -replace '/', '-'
					$DriverPackageDest = $DriverPackageDest -replace '/', '-'
				}
				
				# Driver variables & switches
				$DriverCategoryName = $Make + "-" + $Model + "-" + $OperatingSystem + "-" + $DriverRevision
				
				
				# =================== INITIATE DOWNLOADS ===================
				
				if ($ImportInto -ne "MDT")
				{
					# Product Type Display
					if ($ImportInto -eq "Download Only")
					{
						$Product = "Download Only"
					}
					else
					{
						$Product = "SCCM"
					}
					
					if ($DownloadType -ne "Drivers")
					{
						# ================= BIOS Upgrade Download ==================
						
						$ProgressListBox.Items.Add("$($Product): Retrieving BIOS Download URL For $Make Client Model: $($Model)")
						UpdateLogWindow
						if ($UseProxyServerCheckbox.Checked -eq $true)
						{
							$ModelLink = (Invoke-WebRequest -Uri $DellDownloadList -Proxy $ProxyServer -ProxyUseDefaultCredentials).Links | Where-Object { $_.outerText -eq $Model }
							if ($ModelLink -eq $null)
							{
								$ModelLink = (Invoke-WebRequest -Uri $DellDownloadList -Proxy $ProxyServer -ProxyCredential $ProxyCred).Links | Where-Object { $_.outerText -eq $Model }
							}
						}
						else
						{
							$ModelLink = (Invoke-WebRequest -Uri $DellDownloadList).Links | Where-Object { $_.outerText -eq $Model }
						}
						$ModelURL = (Split-Path $DellDownloadList -Parent) + "/" + ($ModelLink.href)
						# Correct Slash Direction Issues
						$ModelURL = $ModelURL.Replace("\", "/")
						if ($UseProxyServerCheckbox.Checked -eq $true)
						{
							$BIOSDownload = (Invoke-WebRequest -Uri $ModelURL -UseBasicParsing -Proxy $ProxyServer -ProxyUseDefaultCredentials).Links | Where-Object { ($_.outerHTML -like "*BIOS*") -and ($_.outerHTML -like "*WINDOWS*") } | select -First 1
							if ($BIOSDownload -eq $null)
							{
								$BIOSDownload = (Invoke-WebRequest -Uri $ModelURL -UseBasicParsing -Proxy $ProxyServer -ProxyCredential $ProxyCred).Links | Where-Object { ($_.outerHTML -like "*BIOS*") -and ($_.outerHTML -like "*WINDOWS*") } | select -First 1
							}
						}
						else
						{
							$BIOSDownload = (Invoke-WebRequest -Uri $ModelURL -UseBasicParsing).Links | Where-Object { ($_.outerHTML -like "*BIOS*") -and ($_.outerHTML -like "*WINDOWS*") } | select -First 1
						}
						$BIOSFile = $BIOSDownload.href | Split-Path -Leaf
						$BIOSVer = ($BIOSFile.Substring(0, $BIOSFile.length - 4)).Split("_") | select -Last 1
						$BIOSVerDir = $BIOSVer -replace '\.', '-'
						$BIOSUpdateRoot = ($DriverRepositoryRoot + $Model + "\BIOS\" + $BIOSVerDir + "\")
						
						If (($BIOSDownload -ne $null) -and ($Make -eq "Dell"))
						{
							$ProgressListBox.Items.Add("$($Product): BIOS Download URL Found: $($DellDownloadBase + $($BIOSDownload.href))")
							UpdateLogWindow
							# Check for destination directory, create if required and download the BIOS upgrade file
							if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\BIOS")) -eq $true)
							{
								if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\BIOS\" + $BIOSVerDir + "\" + $BIOSFile)) -eq $false)
								{
									New-Item -Path $BIOSUpdateRoot -ItemType Dir
									$ProgressListBox.Items.Add("Downloading $($BIOSFile) BIOS update file")
									UpdateLogWindow
									if ($UseProxyServerCheckbox.Checked -eq $true)
									{
										Start-BitsTransfer ($DellDownloadBase + $BIOSDownload.href) -Destination ($BIOSUpdateRoot + $BIOSFile) -RetryTimeout 90 -RetryInterval 180 -ProxyList $ProxyServer -ProxyAuthentication NTLM -ProxyCredential $ProxyCred -ProxyUsage SystemDefault
									}
									else
									{
										Start-BitsTransfer ($DellDownloadBase + $BIOSDownload.href) -Destination ($BIOSUpdateRoot + $BIOSFile) -RetryTimeout 90 -RetryInterval 180
									}
								}
								else
								{
									$ProgressListBox.Items.Add("$($Product): Skipping $BIOSFile... File already downloaded...")
									UpdateLogWindow
								}
							}
							else
							{
								$ProgressListBox.Items.Add("$($Product): Creating $Model download folder")
								New-Item -Type dir -Path $BIOSUpdateRoot
								$ProgressListBox.Items.Add("$($Product): Downloading $($BIOSFile) BIOS update file")
								if ($UseProxyServerCheckbox.Checked -eq $true)
								{
									Start-BitsTransfer ($DellDownloadBase + $BIOSDownload.href) -Destination ($BIOSUpdateRoot + $BIOSFile) -RetryTimeout 90 -RetryInterval 180 -ProxyList $ProxyServer -ProxyAuthentication NTLM -ProxyCredential $ProxyCred -ProxyUsage SystemDefault
								}
								else
								{
									Start-BitsTransfer ($DellDownloadBase + $BIOSDownload.href) -Destination ($BIOSUpdateRoot + $BIOSFile) -RetryTimeout 90 -RetryInterval 180
								}
							}
							UpdateLogWindow
							if ($Product -ne "Download Only")
							{
								# ================= Create BIOS Update Package ==================
								
								Set-Location -Path ($SiteCode + ":")
								$BIOSUpdatePackage = ("$Make" + " " + $Model + " " + "BIOS UPDATE")
								$BIOSModelPackage = Get-CMPackage -name $BIOSUpdatePackage
								
								if (($BIOSModelPackage -eq $null) -or ($BIOSModelPackage.Version -ne $BIOSVer))
								{
									$ProgressListBox.Items.Add("$($Product): Creating BIOS Package")
									New-CMPackage -Name "$BIOSUpdatePackage" -Path $BIOSUpdateRoot -Description "$Make $Model BIOS Updates" -Manufacturer "$Make" -Language English -version $BIOSVer
								}
								Set-Location -Path $env:TEMP
								$BIOSUpdateScript = ($BIOSUpdateRoot + "BIOSUpdate.ps1")
								$CurrentBIOSFile = Get-ChildItem -Path $BIOSUpdateRoot -Filter *.exe -Recurse | Sort-Object $_.LastWriteTime | select -First 1
								if ((Test-Path -Path $BIOSUpdateScript) -eq $False)
								{
									# Create BIOSUpdate.ps1 Deployment Script
									$ProgressListBox.Items.Add("$($Product): Creating BIOS Update PowerShell Script")
									New-Item -Path ($BIOSUpdateRoot + "BIOSUpdate.ps1") -ItemType File
									$BIOSSwitches = " -noreboot -nopause "
									Add-Content -Path $BIOSUpdateScript ('$CurrentBIOSFile=' + '"' + $($CurrentBIOSFile.name) + '"')
									Add-Content -Path $BIOSUpdateScript ('$BIOSSwitches=' + '"' + $($BIOSSwitches) + '"')
									Add-Content -Path $BIOSUpdateScript ('Start-Process $CurrentBIOSFile -ArgumentList $BIOSSwitches')
								}
								else
								{
									# Check if older BIOS update exists and update BIOSUpdate deployment script
									$BIOSFileCount = (Get-ChildItem -Path $BIOSUpdateRoot -Filter *.exe -Recurse).count
									if ($BIOSFileCount -gt 1)
									{
										$OldBIOSFiles = Get-ChildItem -Path $BIOSUpdateRoot -Filter *.exe -Recurse | Where-Object { $_.Name -ne $CurrentBIOSFile.name }
										
										foreach ($OldBIOS in $OldBIOSFiles)
										{
											(Get-Content -Path $BIOSUpdateScript) -replace $OldBIOS.name, $CurrentBIOSFile.name | Set-Content -Path $BIOSUpdateScript
										}
									}
								}
								UpdateLogWindow
								
								# =============== Refresh Distribution Points =================
								Set-Location -Path ($SiteCode + ":")
								Get-CMPackage -name $BIOSUpdatePackage | Update-CMDistributionPoint
								Set-Location -Path $env:TEMP
							}
							
						}
						else
						{
							$ProgressListBox.Items.Add("$($Product): BIOS Download Not Found")
						}
					}
					
					if ($DownloadType -ne "BIOS")
					{
						# =============== SCCM Driver Cab Download =================
						
						$ProgressListBox.Items.Add(" ")
						$ProgressListBox.Items.Add("$($Product): Retrieving SCCM Driver Pack Site For $Make $Model")
						$ProgressListBox.Items.Add("$($Product): URL Found: $ModelURL")
						UpdateLogWindow
						
						If (($ModelURL -ne $Null) -or ($ModelURL -ne "badLink"))
						{
							
							# Cater for HP / Model Issue
							$Model = $Model -replace '/','-'
							
							# Check for destination directory, create if required and download the driver cab
							if ((Test-Path -Path ("$DriverRepositoryRoot" + $Model + "\Driver Cab\" + $DriverCab)) -eq $false)
							{
								$ProgressListBox.Items.Add("$($Product): Creating $Model download folder")
								if ((Test-Path -Path ("$DriverRepositoryRoot" + $Model + "\Driver Cab")) -eq $false)
								{
									New-Item -Type dir -Path ("$DriverRepositoryRoot" + $Model + "\Driver Cab")
								}
														
								$ProgressListBox.Items.Add("$($Product): Downloading $DriverCab driver cab file")
								$ProgressListBox.Items.Add("$($Product): Downloading from URL: $DriverDownload")
								UpdateLogWindow
								
								Start-Job -Name "$Model-DriverDownload" -ScriptBlock $DriverDownloadJob -ArgumentList ($DriverRepositoryRoot, $Model, $DriverCab, $DriverDownload, $ProxyServer, $ProxyCred)
								sleep -Seconds 5
								$BitsJob = Get-BitsTransfer | Where-Object { $_.DisplayName -eq "$Model-DriverDownload" }
								while (($BitsJob).JobState -eq "Connecting")
								{
									$ProgressListBox.Items.Add("$($Product): Establishing Connection to $DriverDownload...")
									sleep -seconds 30
									UpdateLogWindow
								}
								while (($BitsJob).JobState -eq "Transferring")
								{
									$PercentComplete = [int](($BitsJob.BytesTransferred * 100)/$BitsJob.BytesTotal);
									$ProgressListBox.Items.Add("$($Product): Downloaded $([int]((($BitsJob).BytesTransferred)/1024)) kB of $([int]((($BitsJob).BytesTotal)/1024)) kB ($PercentComplete%). Next update in 30 seconds..")
									sleep -seconds 30
									UpdateLogWindow
								}
								Get-BitsTransfer | Where-Object { $_.DisplayName -eq "$Model-DriverDownload" } | Complete-BitsTransfer
								$ProgressListBox.Items.Add("$($Product): Driver Revision: $DriverRevision")
							}
							else
							{
								$ProgressListBox.Items.Add("$($Product): Skipping $DriverCab... Driver pack already downloaded...")
							}
							
							# Cater for HP / Model Issue
							$Model = $Model -replace '/', '-'
							
							if (((Test-Path -Path $("$DriverRepositoryRoot" + $Model + "\Driver Cab\" + $DriverCab)) -eq $true))
							{
								
								# =============== Create Driver Package + Import Drivers =================
								
								if ((Test-Path -Path $DriverExtractDest) -eq $false)
								{
									
									# Extract Drivers From Driver							
									New-Item -Type dir -Path "$DriverExtractDest"
									
									$ProgressListBox.Items.Add(" ")
									$ProgressListBox.Items.Add("==================== $PRODUCT DRIVER EXTRACT ====================")
									$ProgressListBox.Items.Add(" ")
									$ProgressListBox.Items.Add("$($Product): Expanding Driver CAB Source File: $DriverCab")
									$ProgressListBox.Items.Add("$($Product): Driver CAB Destination Directory: $DriverExtractDest")
									UpdateLogWindow
									
									if ($Make -eq "Dell")
									{
										$ProgressListBox.Items.Add("$($Product): Extracting $Make Drivers to $DriverExtractDest")
										Expand "$DriverSourceCab" -F:* "$DriverExtractDest"
									}
									if ($Make -eq "HP")
									{
										# Driver Silent Extract Switches
										$HPTemp = $env:TEMP + "\" + $Model + "\Win" + $WindowsVersion + $Architecture
										$HPTemp = $HPTemp -replace '/', '-'
										
										# HP Work Around For Long Dir
										If ((($HPTemp).Split("-").Count) -gt "1")
										{
											$HPTemp = ($HPTemp).Split("-")[0]
										}
										
										$ProgressListBox.Items.Add("$($Product): Extracting $Make Drivers to $HPTemp")
										$HPSilentSwitches = "-PDF -F" + $HPTemp + " -S -E"
										
										Start-Process -FilePath $($DriverRepositoryRoot + $Model + "\Driver Cab\" + $DriverCab) -ArgumentList $HPSilentSwitches -Verb RunAs
										$DriverProcess = ($DriverCab).Substring(0, $DriverCab.length - 4)
										
										# Wait for HP SoftPaq Process To Finish
										While ((Get-Process).name -contains $DriverProcess)
										{
											$ProgressListBox.Items.Add("$($Product): Waiting For Extract Process ($DriverProcess) To Complete..  Next Check In 30 Seconds")
											UpdateLogWindow
											sleep -Seconds 30
										}
										
										# Move HP Extracted Drivers To UNC Share 
										$HPExtract = Get-ChildItem -Path $HPTemp
										Start-Job -Name "$Model-Driver-Move" -ScriptBlock $MoveHPDrivers -ArgumentList ($HPExtract, $DriverExtractDest)
										while ((Get-Job -Name "$Model-Driver-Move").State -eq "Running")
										{
											$ProgressListBox.Items.Add("$($Product): Moving $Make $Model $OperatingSystem $Architecture Driver.. Next Check In 30 Seconds")
											UpdateLogWindow
											sleep -seconds 30
										}
										Get-Job -Name "$Model-Driver-Move" | Remove-Job
									}
									if ($Make -eq "Lenovo")
									{
										# Driver Silent Extract Switches
										$LenovoSilentSwitches = "/VERYSILENT /DIR=" + "$($DriverExtractDest)" + "/Extract=Yes"
										
										$ProgressListBox.Items.Add("$($Product): Extracting $Make Drivers to $DriverExtractDest")									
										Start-Process -FilePath $($DriverRepositoryRoot + $Model + "\Driver Cab\" + $DriverCab) -ArgumentList $LenovoSilentSwitches -Verb RunAs
										$DriverProcess = ($DriverCab).Substring(0, $DriverCab.length - 4)
										
										# Wait for Lenovo Driver Process To Finish
										While ((Get-Process).name -contains $DriverProcess)
										{
											$ProgressListBox.Items.Add("$($Product): Waiting For Extract Process To Complete..  Next Check In 60 Seconds")
											UpdateLogWindow
											sleep -seconds 30
										}
									}
								}
								else
								{
									$ProgressListBox.Items.Add("Skipping $LenovoDriverFileName.. Drivers already extracted...")
								}
								
								if ($ImportInto -ne "Download Only")
								{
									if ($ImportInto -like "*Driver*")
									{
										$ProgressListBox.Items.Add(" ")
										$ProgressListBox.Items.Add("==================== $PRODUCT DRIVER IMPORT ====================")
										$ProgressListBox.Items.Add(" ")
										
										$CMDriverPackage = ("$Make " + $Model + " - " + $OperatingSystem + " " + $Architecture)
										Set-Location -Path ($SiteCode + ":")
										if ((Get-CMDriverPackage -Name $CMDriverPackage | Where-Object { $_.Version -eq $DriverRevision }) -eq $null)
										{
											
											New-Item -Type dir -Path $DriverPackageDest
											Set-Location -Path ($SiteCode + ":")
											
											$ProgressListBox.Items.Add("$($Product): Creating Driver Package $CMDriverPackage")
											$ProgressListBox.Items.Add(" ")
											$ProgressListBox.Items.Add("$($Product): Searching For Driver INF Files In $DriverExtractDest")
											UpdateLogWindow
											
											Set-Location -Path $env:TEMP
											
											$DriverINFFiles = Get-ChildItem -Path "$DriverExtractDest" -Recurse -Filter "*.inf" | Where-Object { $_.FullName -like "*$Architecture*" }
											if ($DriverINFFiles.Count -gt $null)
											{
												Set-Location -Path ($SiteCode + ":")
												if (Get-CMCategory -CategoryType DriverCategories -name $DriverCategoryName)
												{
													$ProgressListBox.Items.Add("$($Product): Category already exists")
													$DriverCategory = Get-CMCategory -CategoryType DriverCategories -name $DriverCategoryName
												}
												else
												{
													$ProgressListBox.Items.Add("$($Product): Creating Category $DriverCategoryName")
													$DriverCategory = New-CMCategory -CategoryType DriverCategories -name $DriverCategoryName
												}
												$ProgressListBox.Items.Add("$($Product): Creating Driver Package for $Make $Model (Version $DriverRevision)")
												UpdateLogWindow
												New-CMDriverPackage -Name $CMDriverPackage -path "$DriverPackageDest"
												Set-CMDriverPackage -Name $CMDriverPackage -Version $DriverRevision
												$DriverPackage = Get-CMDriverPackage -Name $CMDriverPackage
												
												# Import Driver Loop
												$DriverNo = 1
												foreach ($DriverINF in $DriverINFFiles)
												{
													$DriverInfo = Import-CMDriver -UncFileLocation ($DriverINF.FullName) -ImportDuplicateDriverOption AppendCategory -EnableAndAllowInstall $True -AdministrativeCategory $DriverCategory | Select-Object *
													Add-CMDriverToDriverPackage -DriverID $DriverInfo.CI_ID -DriverPackageName "$($CMDriverPackage)"
													$ProgressListBox.Items.Add("$($Product): Importing Driver INF $DriverNo Of $($DriverINFFiles.count): $($DriverINF.FullName | Split-Path -Leaf)")
													$DriverNo++
													UpdateLogWindow
												}
												
												# Check For Driver Package
												$SCCMDriverPackage = Get-CMDriverPackage -Name $CMDriverPackage | Where-Object { $_.Version -eq $DriverRevision }
												if ($SCCMDriverPackage.PackageID -gt $null)
												{
													$ProgressListBox.Items.Add("$($Product): Driver Package $($SCCMDriverPackage.PackageID) Created Succesfully")
												}
												else
												{
													$ProgressListBox.ForeColor = "Red"
													$ProgressListBox.Items.Add("ERROR: Errors Occuring While Creating Driver Package")
												}
												UpdateLogWindow
												Set-Location -Path $env:TEMP
											}
											else
											{
												$ProgressListBox.Items.Add("$($Product): Extract Folder Empty.. Skipping Driver Import / Package Creation")
												UpdateLogWindow
											}
										}
										else
										{
											$ProgressListBox.Items.Add("$($Product): Driver Package Already Exists.. Skipping")
											Set-Location -Path $env:TEMP
										}
									}
									if ($ImportInto -like "*Standard*")
									{
										$ProgressListBox.Items.Add(" ")
										$ProgressListBox.Items.Add("==================== $PRODUCT DRIVER PACKAGE  ====================")
										$ProgressListBox.Items.Add(" ")
										$CMPackage = ("$Make " + $Model + " - " + $OperatingSystem + " " + $Architecture)
										Set-Location -Path ($SiteCode + ":")
										if ((Get-CMPackage -Name $CMPackage | Where-Object { $_.Version -eq $DriverRevision }) -eq $null)
										{
											Set-Location -Path $env:TEMP
											New-Item -Type dir -Path $DriverPackageDest
											Set-Location -Path ($SiteCode + ":")
											
											$ProgressListBox.Items.Add("$($Product): Creating Package for $Make $Model (Version $DriverRevision)")
											UpdateLogWindow
											New-CMPackage -Name $CMPackage -path "$DriverPackageDest" -Manufacturer $Make -Description "$Make $Model Windows $WindowsVersion $Architecture Drivers" -Version $DriverRevision
											# Move Extracted Drivers To Driver Package Directory
											$ProgressListBox.Items.Add("$($Product): Source Directory $DriverExtractDest")
											$ProgressListBox.Items.Add("$($Product): Destination Directory $DriverPackageDest")
											$ProgressListBox.Items.Add(" ")
											UpdateLogWindow
											Set-Location -Path $env:TEMP
											# Copy Drivers To Package Location
											Start-Job -Name "$Model-Driver-Package" -ScriptBlock $PackageDrivers -ArgumentList ($Make, $DriverExtractDest, $Architecture, $DriverPackageDest)
											while ((Get-Job -Name "$Model-Driver-Package").State -eq "Running")
											{
												$ProgressListBox.Items.Add("$($Product): Copying $Make $Model $OperatingSystem $Architecture Drivers.. Next Check In 30 Seconds")
												UpdateLogWindow
												sleep -seconds 30
											}
											Get-Job -Name "$Model-Driver-Package" | Remove-Job
											
											# Check For Driver Package
											Set-Location -Path ($SiteCode + ":")
											$SCCMPackage = Get-CMPackage -Name $CMPackage | Where-Object { $_.Version -eq $DriverRevision }
											if ($SCCMPackage.PackageID -gt $null)
											{
												$ProgressListBox.Items.Add("$($Product): Driver Package $($SCCMPackage.PackageID) Created Succesfully")
											}
											else
											{
												$ProgressListBox.ForeColor = "Red"
												$ProgressListBox.Items.Add("ERROR: Errors Occuring While Creating Package")
											}
											UpdateLogWindow
											Set-Location -Path $env:TEMP
										}
										else
										{
											$ProgressListBox.Items.Add("$($Product): Driver Package Already Exists.. Skipping")
											Set-Location -Path $env:TEMP
										}
									}
								}
								
							}
							
						}
					}
					else
					{
						$ProgressListBox.Items.Add("$($Product): Operating system driver package download path not found.. Skipping $Model")
					}
					Set-Location -Path $env:TEMP
				}
			}
			
			if (($ImportInto -like "*Both*") -or ($ImportInto -eq "MDT"))
			{
				Set-Location -Path $env:TEMP
				# Import MDT Module
				$ProgressListBox.Items.Add("IMPORT: Importing MDT PowerShell Module")
				$MDTPSLocation = "C:\Program Files\Microsoft Deployment Toolkit\bin\MicrosoftDeploymentToolkit.psd1"
				if ((Test-Path -Path $MDTPSLocation) -eq $true)
				{
					Import-Module "$MDTPSLocation"
					
					UpdateLogWindow
					
					$Product = "MDT"
					
					# =================== MDT Driver Download =====================
					
					$ProgressListBox.Items.Add(" ")
					$ProgressListBox.Items.Add("==================== $Product Driver Download ====================")
					$ProgressListBox.Items.Add(" ")
					$ProgressListBox.Items.Add("Starting $Product Driver Download Process")
					UpdateLogWindow
					
					# =================== DEFINE VARIABLES =====================
					
					$ProgressListBox.Items.Add("$($Product): Driver Package Base Location Set To $DriverRepositoryRoot")
					
					# Operating System Version
					$OperatingSystem = ("Windows " + $WindowsVersion)
					UpdateLogWindow
					
					# =============== MDT Driver Cab Download =================
					
					# Cater for HP / Model Issue
					$Model = $Model -replace '/', '-'
					
					If (($ModelURL -ne $null) -or ($ModelURL -ne "badLink"))
					{
						# Check for destination directory, create if required and download the driver cab
						if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\Driver Cab\" + $DriverCab)) -eq $false)
						{
							$ProgressListBox.Items.Add("$($Product): Creating $Model download folder")
							if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\Driver Cab")) -eq $false)
							{
								New-Item -Type dir -Path ($DriverRepositoryRoot + $Model + "\Driver Cab")
							}
							$ProgressListBox.Items.Add("$($Product): Downloading $DriverCab driver cab file")
							$ProgressListBox.Items.Add("$($Product): Downloading from URL: $DriverDownload")
							UpdateLogWindow
							
							Start-Job -Name "$Model-DriverDownload" -ScriptBlock $DriverDownloadJob -ArgumentList ($DriverRepositoryRoot, $Model, $DriverCab, $DriverDownload, $ProxyServer, $ProxyCred)
							sleep -Seconds 5
							$BitsJob = Get-BitsTransfer | Where-Object { $_.DisplayName -eq "$Model-DriverDownload" }
							while (($BitsJob).JobState -eq "Connecting")
							{
								$ProgressListBox.Items.Add("$($Product): Establishing Connection to $DriverDownload...")
								sleep -seconds 30
								UpdateLogWindow
							}
							while (($BitsJob).JobState -eq "Transferring")
							{
								$PercentComplete = [int](($BitsJob.BytesTransferred * 100)/$BitsJob.BytesTotal);
								$ProgressListBox.Items.Add("$($Product): Downloaded $([int]((($BitsJob).BytesTransferred)/1024)) kB of $([int]((($BitsJob).BytesTotal)/1024)) kB ($PercentComplete%). Next update in 30 seconds..")
								sleep -seconds 30
								UpdateLogWindow
							}
							Get-BitsTransfer | Where-Object { $_.DisplayName -eq "$Model-DriverDownload" } | Complete-BitsTransfer
							$ProgressListBox.Items.Add("$($Product): Driver Revision: $DriverRevision")
						}
						else
						{
							$ProgressListBox.Items.Add("$($Product): Skipping $DriverCab... Driver pack already downloaded...")
						}
						
						# Check for destination directory, create if required and download the driver cab
						if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\Driver Cab\" + $DriverCab)) -eq $false)
						{
							if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\Driver Cab\")) -eq $false)
							{
								$ProgressListBox.Items.Add("$($Product): Creating $Model Download Folder")
								New-Item -Type dir -Path ($DriverRepositoryRoot + $Model + "\Driver Cab")
							}
							else
							{
								# Remove previous driver cab revisions
								Get-ChildItem -Path ($DriverRepositoryRoot + $Model + "\Driver Cab\") | Remove-Item
							}
							$ProgressListBox.Items.Add("Downloading $DriverCab Driver Cab File")
							
							Start-Job -Name "$Model-DriverDownload" -ScriptBlock $DriverDownloadJob -ArgumentList ($DriverRepositoryRoot, $Model, $DriverCab, $DriverDownload, $ProxyServer, $ProxyCred)
							sleep -Seconds 5
							$BitsJob = Get-BitsTransfer | Where-Object { $_.DisplayName -eq "$Model-DriverDownload" }
							while (($BitsJob).JobState -eq "Connecting")
							{
								$ProgressListBox.Items.Add("$($Product): Establishing Connection to $DriverDownload ...")
								sleep -seconds 30
								UpdateLogWindow
							}
							while (($BitsJob).JobState -eq "Transferring")
							{
								$PercentComplete = [int](($BitsJob.BytesTransferred * 100)/$BitsJob.BytesTotal);
								$ProgressListBox.Items.Add("$($Product): Downloaded $([int]((($BitsJob).BytesTransferred)/1024)) kB of $([int]((($BitsJob).BytesTotal)/1024)) kB ($PercentComplete%). Next update in 30 seconds..")
								sleep -seconds 30
								UpdateLogWindow
							}
							Get-BitsTransfer | Where-Object { $_.DisplayName -eq "$Model-DriverDownload" } | Complete-BitsTransfer
							$ProgressListBox.Items.Add("$($Product): Driver Revision: $DriverRevision")
						}
						else
						{
							$ProgressListBox.Items.Add("$($Product): Skipping $DriverCab... Driver pack already extracted...")
						}
						
						if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\Driver Cab\" + $DriverCab)) -eq $true)
						{
							# =============== MDT Driver EXTRACT ====================
							
							if ((Test-Path -Path $DriverExtractDest) -eq $false)
							{
								
								# Extract Drivers From Driver							
								New-Item -Type dir -Path $DriverExtractDest
								
								$ProgressListBox.Items.Add(" ")
								$ProgressListBox.Items.Add("==================== $PRODUCT DRIVER EXTRACT ====================")
								$ProgressListBox.Items.Add(" ")
								$ProgressListBox.Items.Add("$($Product): Expanding Driver CAB Source File: $DriverCab")
								$ProgressListBox.Items.Add("$($Product): Driver CAB Destination Directory: $DriverExtractDest")
								UpdateLogWindow
								
								if ($Make -eq "Dell")
								{
									Expand "$DriverSourceCab" -F:* "$DriverExtractDest"
								}
								if ($Make -eq "HP")
								{
									# Driver Silent Extract Switches
									$HPTemp = $env:TEMP + "\" + $Model + "\Win" + $WindowsVersion + $Architecture						
									$HPTemp = $HPTemp -replace '/', '-'
									
									# HP Work Around For Long Dir
									If ((($HPTemp).Split("-").Count) -gt "1")
									{
										$HPTemp = ($HPTemp).Split("-")[0]
									}
									
									$ProgressListBox.Items.Add("$($Product): Extracting HP Drivers to $HPTemp")
									$HPSilentSwitches = "-PDF -F" + $HPTemp + " -S -E"
									
									Start-Process -FilePath $($DriverRepositoryRoot + $Model + "\Driver Cab\" + $DriverCab) -ArgumentList $HPSilentSwitches -Verb RunAs
									$DriverProcess = ($DriverCab).Substring(0, $DriverCab.length - 4)
									
									# Wait for HP SoftPaq Process To Finish
									While ((Get-Process).name -contains $DriverProcess)
									{
										$ProgressListBox.Items.Add("$($Product): Waiting For Extract Process ($DriverProcess) To Complete..  Next Check In 30 Seconds")
										UpdateLogWindow
										sleep -Seconds 30
									}
									
									# Move HP Extracted Drivers To UNC Share 
									$HPExtract = Get-ChildItem -Path $HPTemp
									Start-Job -Name "$Model-Driver-Move" -ScriptBlock $MoveHPDrivers -ArgumentList ($HPExtract, $DriverExtractDest)
									while ((Get-Job -Name "$Model-Driver-Move").State -eq "Running")
									{
										$ProgressListBox.Items.Add("$($Product): Moving $Make $Model $OperatingSystem $Architecture Driver.. Next Check In 30 Seconds")
										UpdateLogWindow
										sleep -seconds 30
									}
									Get-Job -Name "$Model-Driver-Move" | Remove-Job
								}
								if ($Make -eq "Lenovo")
								{
									# Driver Silent Extract Switches
									$LenovoSilentSwitches = "/VERYSILENT /DIR=$DriverExtractDest /Extract=Yes"
									
									Start-Process -FilePath $($DriverRepositoryRoot + $Model + "\Driver Cab\" + $DriverCab) -ArgumentList $LenovoSilentSwitches -Verb RunAs
									$DriverProcess = ($DriverCab).Substring(0, $DriverCab.length - 4)
									
									# Wait for Lenovo Driver Process To Finish
									While ((Get-Process).name -contains $DriverProces)
									{
										$ProgressListBox.Items.Add("$($Product): Waiting For Extract Process To Complete..  Next Check In 60 Seconds")
										UpdateLogWindow
										sleep -seconds 30
									}
								}
							}
							
							# =============== MDT Driver Import ====================
							
							$ProgressListBox.Items.Add(" ")
							$ProgressListBox.Items.Add("==================== $PRODUCT Driver Import ====================")
							$ProgressListBox.Items.Add(" ")
							$ProgressListBox.Items.Add("$($Product): Starting MDT Driver Import Process")
							UpdateLogWindow
							
							# Detect First MDT PSDrive
							$ProgressListBox.Items.Add("$($Product): Detecting MDT PSDrive")
							If (!$PSDriveName) { $PSDriveName = (Get-MDTPersistentDrive)[0].name }
							
							# Detect First MDT Deployment Share
							$ProgressListBox.Items.Add("$($Product): Detecting MDT Deployment Share")
							If (!$DeploymentShare) { $DeploymentShare = (Get-MDTPersistentDrive)[0].path }
							
							$MDTDriverPath = $PSDriveName + ':\Out-of-Box Drivers'
							$MDTSelectionProfilePath = $PSDriveName + ':\Selection Profiles'
							
							# Connect to Deployment Share
							$ProgressListBox.Items.Add("$($Product): Connecting to MDT Share")
							If (!(Get-PSDrive -Name $PSDriveName -ErrorAction SilentlyContinue))
							{
								New-PSDrive -Name $PSDriveName -PSProvider MDTProvider -Root $DeploymentShare
							}
							
							$DSDriverPath = $PSDriveName + ':\Out-of-Box Drivers'
							$DSSelectionProfilePath = $PSDriveName + ':\Selection Profiles'
							
							# Connect to Deployment Share
							If ((Get-PSDrive -Name $PSDriveName -ErrorAction SilentlyContinue) -eq $false)
							{
								New-PSDrive -Name $PSDriveName -PSProvider MDTProvider -Root $DeploymentShare
							}
							
							# Cater for HP / Model Issue
							$Model = $Model -replace '/', '-'
							
							# =============== MDT Driver Import ====================
							
							$OperatingSystemDir = ($OperatingSystem + " " + $Architecture)
							$DriverSource = $DriverRepositoryRoot + $Model + '\Driver Cab\' + $DriverCab
							
							if ((Test-Path $MDTDriverPath\$OperatingSystemDir) -eq $false)
							{
								New-Item -path $MDTDriverPath -enable "True" -Name $OperatingSystemDir -ItemType "folder"
							}
							if ((Test-Path $MDTSelectionProfilePath"\Drivers - "$OperatingSystemDir) -eq $false)
							{
								New-Item -path $MDTSelectionProfilePath -enable "True" -Name "Drivers - $OperatingSystemDir" -Definition "<SelectionProfile><Include path=`"Out-of-Box Drivers\$OS`" /></SelectionProfile>" -ReadOnly "False"
							}
							if ((Test-Path $MDTDriverPath\$OperatingSystemDir\$Make) -eq $false)
							{
								New-Item -path $MDTDriverPath\$OperatingSystemDir -enable "True" -Name $Make -ItemType "folder"
							}
							if ((Test-Path $MDTDriverPath\$OperatingSystemDir\$Make\$Model) -eq $false)
							{
								New-Item -path $MDTDriverPath\$OperatingSystemDir\$Make -enable "True" -Name $Model -ItemType "folder"
							}
							if ((Test-Path $MDTDriverPath\$OperatingSystemDir\$Make\$Model\$DriverRevision) -eq $false)
							{
								New-Item -path $MDTDriverPath\$OperatingSystemDir\$Make\$Model -enable "True" -Name $DriverRevision -ItemType "folder"
								$ProgressListBox.Items.Add("$($Product): Importing MDT driver pack for $Make $Model - Revision $DriverRevision")
								$ProgressListBox.Items.Add("$($Product): MDT Driver Path = $MDTDriverPath\$OperatingSystemDir\$Make\$Model\$DriverRevision")
								
								Start-Job -Name "$Model-MDTImport" -ScriptBlock $MDTImportJob -ArgumentList ($PSDriveName, $MDTDriverPath, $Make, $Model, $DriverRevision, $OperatingSystemDir, $DriverExtractDest, $DeploymentShare, $Architecture)
								while ((Get-Job -Name "$Model-MDTImport").State -eq "Running")
								{
									$ProgressListBox.Items.Add("$($Product): Waiting For Import Process To Finish For $Make $Model $OperatingSystem $Architecture.. Next Check In 30 Seconds")
									UpdateLogWindow
									sleep -seconds 30
								}
								Get-Job -Name "$Model-MDTImport" | Remove-Job
							}
							else
							{
								$ProgressListBox.Items.Add("$($Product): Driver pack already exists.. Skipping..")
							}
						}
						else
						{
							$ProgressListBox.Items.Add("$($Product): Error Downloading $DriverCab")
						}
					}
				}
				else
				{
					$ProgressListBox.Items.Add("ERROR: MDT PowerShell Commandlets Not Found - Path Specified $MDTPSLocation")
				}
			}
			If ($RemoveLegacyDriverCheckbox.Checked -eq $true)
			{
				Set-Location -Path ($SiteCode + ":")
				$ProgressListBox.Items.Add(" ")
				$ProgressListBox.Items.Add("======== Superseded Driver Package Option Processing ======== ")
				$ProgressListBox.Items.Add(" ")
				UpdateLogWindow
				$ModelDriverPacks = Get-CMDriverPackage | Where-Object { $_.Name -like "*$Model*$WindowsVersion*$Architecture*" } | Sort-Object Version -Descending
				if ($ModelDriverPacks.Count -gt "1")
				{
					$LegacyDriverPack = $ModelDriverPacks | select -Last 1
					$ProgressListBox.Items.Add("Removing $($LegacyDriverPack.Name) / Package ID $($LegacyDriverPack.PackageID)")
					Remove-CMDriverPackage -id $LegacyDriverPack.PackageID -Force
					UpdateLogWindow
				}
				Set-Location -Path $env:TEMP
			}
			$ProgressBar.Increment(1)
			$ModelProgressOverlay.Increment(1)
			$RemainingModels--
			UpdateLogWindow
		}
		$ProgressBar.Increment(1)
		$ModelProgressOverlay.Increment(1)
		
		if ($CleanUnusedCheckBox.Checked -eq $true)
		{
			Set-Location -Path ($SiteCode + ":")
			$ProgressListBox.Items.Add(" ")
			$ProgressListBox.Items.Add("======== Cleanup Driver Option Processing ======== ")
			# Sleep to allow for driver package registration
			sleep -Seconds 10
			# Get list of unused drivers
			$DriverList = Get-CMDriverPackage | Get-CMDriver | Select -Property CI_ID
			$UnusedDrivers = Get-CMDriver | Where-Object { $_.CI_ID -notin $DriverList.CI_ID }
			$ProgressListBox.Items.Add(" ")
			$ProgressListBox.Items.Add("$($Product): Found $($UnusedDrivers.Count) Unused Drivers. ")
			$ProgressListBox.Items.Add("$($Product): Starting Driver Package Cleanup Process...")
			UpdateLogWindow
			
			foreach ($Driver in $UnusedDrivers)
			{
				$ProgressListBox.Items.Add("SCCM: Removing $($Driver.LocalizedDisplayName) from Category $($Driver.LocalizedCategoryInstanceNames) ")
				UpdateLogWindow
				Remove-CMDriver -ID $Driver.CI_ID -Force
			}
			$ProgressListBox.Items.Add("SCCM: Cleanup Process Completed")
			UpdateLogWindow
			Set-Location -Path $env:TEMP
		}
		$ProgressListBox.Items.Add(" ")
		$ProgressListBox.Items.Add("======== Finished Processing ======== ")
		$ProgressListBox.Items.Add(" ")
		UpdateLogWindow
		
		
		#Output to Log
		$ProgressListBox.Items | Out-File -FilePath $LogFile -Append
	}
	
	$ConnectSCCMButton_Click = {
		
		$SiteServer = [string]$SiteServerInput.Text
		$ProgressListBox.ForeColor = "Black"
		$ProgressListBox.Items.Clear()
		$ProgressListBox.Items.Add("======== Validating SCCM Server Details ======== ")
		$ProgressListBox.Items.Add(" ")
		If ((Test-WSMan -ComputerName $SiteServer).wsmid -ne $null)
		{
			Clear-Host
			$ProgressListBox.Items.Add("Connected To Site Server: $SiteServer ")
			$ProgressListBox.Items.Add(" ")
			$ProgressListBox.ForeColor = "Black"
			$ProgressListBox.Items.Add("======== Checking SCCM Prerequisites ======== ")
			$ProgressListBox.Items.Add(" ")
			
			# Import SCCM PowerShell Module
			$ModuleName = (Get-Item $env:SMS_ADMIN_UI_PATH).parent.FullName + "\ConfigurationManager.psd1"
			If ($ModuleName -ne $null)
			{
				$ProgressListBox.Items.Add("Loading SCCM PowerShell Module")
				Import-Module $ModuleName
				$ProgressListBox.Items.Add(" ")
				$ProgressListBox.Items.Add("======== Connecting to SCCM Server ======== ")
				$ProgressListBox.Items.Add(" ")
				$ProgressListBox.Items.Add("Querying Site Code From $SiteServer")
				QuerySiteCode -SiteServer $SiteServer
				$SiteCode = $SiteCodeText.Text
			}
			else
			{
				$ProgressListBox.ForeColor = "Red"
				$ProgressListBox.Items.Add("Error: SCCM PowerShell Module Not Found")
			}
		}
		else
		{
			$ProgressListBox.ForeColor = "Red"
			$ProgressListBox.Items.Add("Error: SCCM Server Specified Not Found - $($SiteServerInput.Text)")
		}
		
		#Output to Log
		$ProgressListBox.Items | Out-File -FilePath $LogFile -Append
	}
	
	
	$ClearSelectionButton_Click = {
		#Reset's Windows Form
		$ProgressListBox.ForeColor = "Black"
		$ProductListBox.Items.Clear()
		$ProgressListBox.Items.Clear()
		$SiteServerInput.Text = $null
		$SiteServerInput.Enabled = $true
		$SiteCodeText = $null
		$PlatformComboBox.SelectedItem = $null
		$PlatformComboBox.Enabled = $true
		$DownloadComboBox.SelectedItem = $null
		$DownloadComboBox.Enabled = $true
		$OSComboBox.SelectedItem = $null
		$OSComboBox.Enabled = $true
		$ArchitectureComboxBox.SelectedItem = $null
		$ArchitectureComboxBox.Enabled = $true
		$RepositoryTextBox.Text = $null
		$PackagePathTextBox.Text = $null
		$PackagePathTextBox.Enabled = $true
		$StartDownloadButton.Enabled = $false
		$MDTPathLabel.Text = $null
		$FullModelListBox.Items.Clear()
		$DellCheckBox.Checked = $false
		$HPCheckBox.Checked = $false
		$LenovoCheckBox.Checked = $false
		
	}
	
	$AddToListlButton_Click = {
		foreach ($Item in $FullModelListBox.SelectedItems)
		{
			$ProductListBox.Items.Add($Item)
		}
	}
	
	$FindModelsButton_Click = {
		$FullModelListBox.Items.Clear()
		UpdateModeList $SiteServerInput.Text $SiteCodeText.Text
	}
	
	
	$UseProxyServerCheckbox_CheckedChanged = {
		if ($UseProxyServerCheckbox.Checked -eq $true)
		{
			$ProxyPswdInput.Enabled = $true
			$ProxyUserInput.Enabled = $true
			$ProxyServerInput.Enabled = $true
		}
		else
		{
			$ProxyPswdInput.Enabled = $false
			$ProxyUserInput.Enabled = $false
			$ProxyServerInput.Enabled = $false
		}
	}
	
	$DownloadComboBox_SelectedIndexChanged = {
		
		If ($DownloadComboBox.Text -eq "BIOS")
		{
			$PackagePathTextBox.Enabled = $false
			$OSComboBox.Enabled = $false
			$ArchitectureComboxBox.Enabled = $false
			$LenovoCheckBox.Enabled = $false
			$LenovoCheckBox.Checked = $false
			$HPCheckBox.Enabled = $false
			$HPCheckBox.Checked = $false
			$DellCheckBox.Checked = $true
			$CleanUnusedCheckBox.Enabled = $false
			$RemoveLegacyDriverCheckbox.Enabled = $false
		}
		else
		{
			if ($PlatformComboBox.SelectedItem -eq "Download Only")
			{
				$OSComboBox.Enabled = $true
				$ArchitectureComboxBox.Enabled = $true
				$PackagePathTextBox.Enabled = $false
			}
			else
			{
				$PackagePathTextBox.Enabled = $true
				$OSComboBox.Enabled = $true
				$ArchitectureComboxBox.Enabled = $true
				$PackagePathTextBox.Enabled = $true
				$CleanUnusedCheckBox.Enabled = $true
				$RemoveLegacyDriverCheckbox.Enabled = $true
			}
			$LenovoCheckBox.Enabled = $true
			$HPCheckBox.Enabled = $true
			$DellCheckBox.Checked = $false
		}
	}
	
	$PlatformComboBox_SelectedIndexChanged = {
		If ($PlatformComboBox.SelectedItem -eq "MDT")
		{
			$DownloadComboBox.Text = "Drivers"
			$DownloadComboBox.Enabled = $false
			$PackagePathTextBox.Enabled = $false
			$CleanUnusedCheckBox.Enabled = $false
			$RemoveLegacyDriverCheckbox.Enabled = $false
		}
		If (($PlatformComboBox.SelectedItem -like "SCCM*") -or ($PlatformComboBox.SelectedItem -like "Both*"))
		{
			$DownloadComboBox.Enabled = $true
			$PackagePathTextBox.Enabled = $true
			$CleanUnusedCheckBox.Enabled = $true
			$RemoveLegacyDriverCheckbox.Enabled = $true
		}
		If ($PlatformComboBox.SelectedItem -eq "Download Only")
		{
			$DownloadComboBox.Enabled = $true
			$PackagePathTextBox.Enabled = $true
			$PackagePathTextBox.Enabled = $false
			$CleanUnusedCheckBox.Enabled = $false
			$RemoveLegacyDriverCheckbox.Enabled = $false
		}
		$StartDownloadButton.Enabled = $true
	}
	
	#region Control Helper Functions
	function Update-ListBox
	{
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	
	function Update-ComboBox
	{
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_textbox2 = $textbox2.Text
		$script:MainForm_ArchitectureComboxBox = $ArchitectureComboxBox.Text
		$script:MainForm_ArchitectureComboxBox_SelectedItem = $ArchitectureComboxBox.SelectedItem
		$script:MainForm_DownloadComboBox = $DownloadComboBox.Text
		$script:MainForm_DownloadComboBox_SelectedItem = $DownloadComboBox.SelectedItem
		$script:MainForm_PlatformComboBox = $PlatformComboBox.Text
		$script:MainForm_PlatformComboBox_SelectedItem = $PlatformComboBox.SelectedItem
		$script:MainForm_OSComboBox = $OSComboBox.Text
		$script:MainForm_OSComboBox_SelectedItem = $OSComboBox.SelectedItem
		$script:MainForm_LenovoCheckBox = $LenovoCheckBox.Checked
		$script:MainForm_HPCheckBox = $HPCheckBox.Checked
		$script:MainForm_DellCheckBox = $DellCheckBox.Checked
		$script:MainForm_FullModelListBox = $FullModelListBox.SelectedItems
		$script:MainForm_textbox1 = $textbox1.Text
		$script:MainForm_PackagePathTextBox = $PackagePathTextBox.Text
		$script:MainForm_RepositoryTextBox = $RepositoryTextBox.Text
		$script:MainForm_RemoveLegacyDriverCheckbox = $RemoveLegacyDriverCheckbox.Checked
		$script:MainForm_CleanUnusedCheckBox = $CleanUnusedCheckBox.Checked
		$script:MainForm_SiteCodeText = $SiteCodeText.Text
		$script:MainForm_SiteServerInput = $SiteServerInput.Text
		$script:MainForm_UseProxyServerCheckbox = $UseProxyServerCheckbox.Checked
		$script:MainForm_ProxyPswdInput = $ProxyPswdInput.Text
		$script:MainForm_ProxyUserInput = $ProxyUserInput.Text
		$script:MainForm_ProxyServerInput = $ProxyServerInput.Text
		$script:MainForm_ProgressListBox = $ProgressListBox.SelectedItems
		$script:MainForm_ProductListBox = $ProductListBox.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$DownloadComboBox.remove_SelectedIndexChanged($DownloadComboBox_SelectedIndexChanged)
			$PlatformComboBox.remove_SelectedIndexChanged($PlatformComboBox_SelectedIndexChanged)
			$FindModelsButton.remove_Click($FindModelsButton_Click)
			$AddToListlButton.remove_Click($AddToListlButton_Click)
			$ConnectSCCMButton.remove_Click($ConnectSCCMButton_Click)
			$UseProxyServerCheckbox.remove_CheckedChanged($UseProxyServerCheckbox_CheckedChanged)
			$ClearSelectionButton.remove_Click($ClearSelectionButton_Click)
			$StartDownloadButton.remove_Click($StartDownloadButton_Click)
			$MainForm.remove_Load($MainForm_Load)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$SelectionTabs.SuspendLayout()
	$OSSelectionTab.SuspendLayout()
	$ManufacturerTab.SuspendLayout()
	$DriverStorageTab.SuspendLayout()
	$DriverCleanTab.SuspendLayout()
	$SCCMDellTabControl.SuspendLayout()
	$SCCMTabPage1.SuspendLayout()
	$SCCMTabPage4.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($SelectionTabs)
	$MainForm.Controls.Add($DeployEverythingcomLink)
	$MainForm.Controls.Add($SCCMDellTabControl)
	$MainForm.Controls.Add($labelThisScriptIsUsedAtYo)
	$MainForm.Controls.Add($ClearSelectionButton)
	$MainForm.Controls.Add($ModelProgressOverlay)
	$MainForm.Controls.Add($ProgressBar)
	$MainForm.Controls.Add($ProgressListBox)
	$MainForm.Controls.Add($AboutToolLabel)
	$MainForm.Controls.Add($AutomationLabel)
	$MainForm.Controls.Add($picturebox1)
	$MainForm.Controls.Add($ProductListBox)
	$MainForm.Controls.Add($StartDownloadButton)
	$MainForm.Controls.Add($ModelListBox)
	$MainForm.Controls.Add($LoggingLabel)
	$MainForm.Controls.Add($ModelProgressLabel)
	$MainForm.AutoScaleDimensions = '9, 17'
	$MainForm.AutoScaleMode = 'Font'
	$MainForm.BackColor = 'White'
	$MainForm.ClientSize = '981, 653'
	$MainForm.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$MainForm.FormBorderStyle = 'FixedSingle'
	$MainForm.Margin = '5, 4, 5, 4'
	$MainForm.MaximizeBox = $False
	$MainForm.MinimizeBox = $False
	$MainForm.Name = 'MainForm'
	$MainForm.SizeGripStyle = 'Hide'
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = 'DeployEverything.com - Driver Download Automation Tool v2.5'
	$MainForm.add_Load($MainForm_Load)
	#
	# SelectionTabs
	#
	$SelectionTabs.Controls.Add($OSSelectionTab)
	$SelectionTabs.Controls.Add($ManufacturerTab)
	$SelectionTabs.Controls.Add($DriverStorageTab)
	$SelectionTabs.Controls.Add($DriverCleanTab)
	$SelectionTabs.Location = '299, 201'
	$SelectionTabs.Name = 'SelectionTabs'
	$SelectionTabs.SelectedIndex = 0
	$SelectionTabs.Size = '659, 190'
	$SelectionTabs.TabIndex = 39
	#
	# OSSelectionTab
	#
	$OSSelectionTab.Controls.Add($textbox2)
	$OSSelectionTab.Controls.Add($label2)
	$OSSelectionTab.Controls.Add($ArchitectureComboxBox)
	$OSSelectionTab.Controls.Add($DownloadComboBox)
	$OSSelectionTab.Controls.Add($PlatformComboBox)
	$OSSelectionTab.Controls.Add($OSComboBox)
	$OSSelectionTab.Controls.Add($ArchitectureCheckBox)
	$OSSelectionTab.Controls.Add($lSelectDeployLabel)
	$OSSelectionTab.Controls.Add($OperatingSysLabel)
	$OSSelectionTab.Controls.Add($labelDownloadType)
	$OSSelectionTab.BackColor = 'WhiteSmoke'
	$OSSelectionTab.Location = '4, 26'
	$OSSelectionTab.Name = 'OSSelectionTab'
	$OSSelectionTab.Padding = '3, 3, 3, 3'
	$OSSelectionTab.Size = '651, 160'
	$OSSelectionTab.TabIndex = 0
	$OSSelectionTab.Text = 'Operating System Selection'
	#
	# textbox2
	#
	$textbox2.BackColor = 'WhiteSmoke'
	$textbox2.BorderStyle = 'None'
	$textbox2.Font = 'Microsoft Sans Serif, 8.25pt'
	$textbox2.Location = '411, 46'
	$textbox2.Multiline = $True
	$textbox2.Name = 'textbox2'
	$textbox2.ReadOnly = $True
	$textbox2.Size = '214, 100'
	$textbox2.TabIndex = 45
	$textbox2.TabStop = $False
	$textbox2.Text = 'BIOS downloads are currently only available for Dell client products.

If you select BIOS as the Download Type, other manufacturers will be automatically greyed out from selection.

'
	#
	# label2
	#
	$label2.AutoSize = $True
	$label2.Location = '411, 25'
	$label2.Name = 'label2'
	$label2.Size = '101, 17'
	$label2.TabIndex = 44
	$label2.Text = 'Please Note:'
	#
	# ArchitectureComboxBox
	#
	$ArchitectureComboxBox.BackColor = 'White'
	$ArchitectureComboxBox.DropDownStyle = 'DropDownList'
	$ArchitectureComboxBox.FormattingEnabled = $True
	[void]$ArchitectureComboxBox.Items.Add('64 bit')
	[void]$ArchitectureComboxBox.Items.Add('32 bit')
	$ArchitectureComboxBox.Location = '234, 110'
	$ArchitectureComboxBox.Margin = '4, 3, 4, 3'
	$ArchitectureComboxBox.Name = 'ArchitectureComboxBox'
	$ArchitectureComboxBox.Size = '140, 25'
	$ArchitectureComboxBox.TabIndex = 40
	#
	# DownloadComboBox
	#
	$DownloadComboBox.BackColor = 'White'
	$DownloadComboBox.DropDownStyle = 'DropDownList'
	$DownloadComboBox.FormattingEnabled = $True
	[void]$DownloadComboBox.Items.Add('Drivers')
	[void]$DownloadComboBox.Items.Add('BIOS')
	[void]$DownloadComboBox.Items.Add('All')
	$DownloadComboBox.Location = '17, 110'
	$DownloadComboBox.Margin = '4, 3, 4, 3'
	$DownloadComboBox.Name = 'DownloadComboBox'
	$DownloadComboBox.Size = '189, 25'
	$DownloadComboBox.TabIndex = 39
	$DownloadComboBox.add_SelectedIndexChanged($DownloadComboBox_SelectedIndexChanged)
	#
	# PlatformComboBox
	#
	$PlatformComboBox.BackColor = 'White'
	$PlatformComboBox.DropDownStyle = 'DropDownList'
	$PlatformComboBox.FormattingEnabled = $True
	[void]$PlatformComboBox.Items.Add('SCCM - Driver Pkg')
	[void]$PlatformComboBox.Items.Add('SCCM - Standard Pkg')
	[void]$PlatformComboBox.Items.Add('MDT')
	[void]$PlatformComboBox.Items.Add('Both - SCCM Driver Pkg')
	[void]$PlatformComboBox.Items.Add('Both - SCCM Standard Pkg')
	[void]$PlatformComboBox.Items.Add('Download Only')
	$PlatformComboBox.Location = '17, 44'
	$PlatformComboBox.Margin = '4, 3, 4, 3'
	$PlatformComboBox.Name = 'PlatformComboBox'
	$PlatformComboBox.Size = '189, 25'
	$PlatformComboBox.TabIndex = 38
	$PlatformComboBox.add_SelectedIndexChanged($PlatformComboBox_SelectedIndexChanged)
	#
	# OSComboBox
	#
	$OSComboBox.DropDownStyle = 'DropDownList'
	$OSComboBox.FormattingEnabled = $True
	[void]$OSComboBox.Items.Add('Windows 10')
	[void]$OSComboBox.Items.Add('Windows 8.1')
	[void]$OSComboBox.Items.Add('Windows 8')
	[void]$OSComboBox.Items.Add('Windows 7')
	$OSComboBox.Location = '234, 44'
	$OSComboBox.Margin = '4, 3, 4, 3'
	$OSComboBox.Name = 'OSComboBox'
	$OSComboBox.Size = '140, 25'
	$OSComboBox.TabIndex = 31
	#
	# ArchitectureCheckBox
	#
	$ArchitectureCheckBox.AutoSize = $True
	$ArchitectureCheckBox.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$ArchitectureCheckBox.ForeColor = 'Black'
	$ArchitectureCheckBox.Location = '234, 91'
	$ArchitectureCheckBox.Margin = '4, 0, 4, 0'
	$ArchitectureCheckBox.Name = 'ArchitectureCheckBox'
	$ArchitectureCheckBox.Size = '96, 17'
	$ArchitectureCheckBox.TabIndex = 33
	$ArchitectureCheckBox.Text = 'Architecture'
	#
	# lSelectDeployLabel
	#
	$lSelectDeployLabel.AutoSize = $True
	$lSelectDeployLabel.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$lSelectDeployLabel.ForeColor = 'Black'
	$lSelectDeployLabel.Location = '14, 25'
	$lSelectDeployLabel.Margin = '4, 0, 4, 0'
	$lSelectDeployLabel.Name = 'lSelectDeployLabel'
	$lSelectDeployLabel.Size = '158, 17'
	$lSelectDeployLabel.TabIndex = 30
	$lSelectDeployLabel.Text = 'Deployment Platform'
	#
	# OperatingSysLabel
	#
	$OperatingSysLabel.AutoSize = $True
	$OperatingSysLabel.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$OperatingSysLabel.ForeColor = 'Black'
	$OperatingSysLabel.Location = '234, 25'
	$OperatingSysLabel.Margin = '4, 0, 4, 0'
	$OperatingSysLabel.Name = 'OperatingSysLabel'
	$OperatingSysLabel.Size = '137, 17'
	$OperatingSysLabel.TabIndex = 32
	$OperatingSysLabel.Text = 'Operating System'
	#
	# labelDownloadType
	#
	$labelDownloadType.AutoSize = $True
	$labelDownloadType.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelDownloadType.ForeColor = 'Black'
	$labelDownloadType.Location = '14, 91'
	$labelDownloadType.Margin = '4, 0, 4, 0'
	$labelDownloadType.Name = 'labelDownloadType'
	$labelDownloadType.Size = '119, 17'
	$labelDownloadType.TabIndex = 29
	$labelDownloadType.Text = 'Download Type'
	#
	# ManufacturerTab
	#
	$ManufacturerTab.Controls.Add($FindModelsButton)
	$ManufacturerTab.Controls.Add($labelPleaseSelectManufact)
	$ManufacturerTab.Controls.Add($LenovoCheckBox)
	$ManufacturerTab.Controls.Add($HPCheckBox)
	$ManufacturerTab.Controls.Add($DellCheckBox)
	$ManufacturerTab.Controls.Add($FullModelListBox)
	$ManufacturerTab.Controls.Add($AddToListlButton)
	$ManufacturerTab.BackColor = 'WhiteSmoke'
	$ManufacturerTab.Location = '4, 26'
	$ManufacturerTab.Name = 'ManufacturerTab'
	$ManufacturerTab.Size = '651, 160'
	$ManufacturerTab.TabIndex = 3
	$ManufacturerTab.Text = 'Manufacturer Selection'
	#
	# FindModelsButton
	#
	$FindModelsButton.BackColor = 'SteelBlue'
	$FindModelsButton.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$FindModelsButton.ForeColor = 'White'
	$FindModelsButton.Location = '383, 123'
	$FindModelsButton.Margin = '4, 3, 4, 3'
	$FindModelsButton.Name = 'FindModelsButton'
	$FindModelsButton.Size = '112, 23'
	$FindModelsButton.TabIndex = 11
	$FindModelsButton.Text = 'Find Models'
	$FindModelsButton.UseVisualStyleBackColor = $False
	$FindModelsButton.add_Click($FindModelsButton_Click)
	#
	# labelPleaseSelectManufact
	#
	$labelPleaseSelectManufact.AutoSize = $True
	$labelPleaseSelectManufact.Location = '25, 22'
	$labelPleaseSelectManufact.Name = 'labelPleaseSelectManufact'
	$labelPleaseSelectManufact.Size = '213, 17'
	$labelPleaseSelectManufact.TabIndex = 44
	$labelPleaseSelectManufact.Text = 'Please Select Manufacturer:'
	#
	# LenovoCheckBox
	#
	$LenovoCheckBox.Location = '25, 104'
	$LenovoCheckBox.Name = 'LenovoCheckBox'
	$LenovoCheckBox.Size = '124, 24'
	$LenovoCheckBox.TabIndex = 43
	$LenovoCheckBox.Text = 'Lenovo'
	$LenovoCheckBox.UseVisualStyleBackColor = $True
	#
	# HPCheckBox
	#
	$HPCheckBox.Location = '25, 74'
	$HPCheckBox.Name = 'HPCheckBox'
	$HPCheckBox.Size = '124, 24'
	$HPCheckBox.TabIndex = 42
	$HPCheckBox.Text = 'Hewlett-Packard'
	$HPCheckBox.UseVisualStyleBackColor = $True
	#
	# DellCheckBox
	#
	$DellCheckBox.Location = '25, 44'
	$DellCheckBox.Name = 'DellCheckBox'
	$DellCheckBox.Size = '104, 24'
	$DellCheckBox.TabIndex = 41
	$DellCheckBox.Text = 'Dell'
	$DellCheckBox.UseVisualStyleBackColor = $True
	#
	# FullModelListBox
	#
	$FullModelListBox.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$FullModelListBox.ForeColor = 'SteelBlue'
	$FullModelListBox.FormattingEnabled = $True
	$FullModelListBox.ItemHeight = 17
	$FullModelListBox.Location = '253, 22'
	$FullModelListBox.Margin = '4, 3, 4, 3'
	$FullModelListBox.Name = 'FullModelListBox'
	$FullModelListBox.SelectionMode = 'MultiExtended'
	$FullModelListBox.Size = '384, 89'
	$FullModelListBox.Sorted = $True
	$FullModelListBox.TabIndex = 40
	#
	# AddToListlButton
	#
	$AddToListlButton.BackColor = 'SteelBlue'
	$AddToListlButton.Enabled = $False
	$AddToListlButton.ForeColor = 'White'
	$AddToListlButton.Location = '503, 123'
	$AddToListlButton.Margin = '4, 3, 4, 3'
	$AddToListlButton.Name = 'AddToListlButton'
	$AddToListlButton.Size = '134, 23'
	$AddToListlButton.TabIndex = 1
	$AddToListlButton.Text = 'Add To Import List'
	$AddToListlButton.UseVisualStyleBackColor = $False
	$AddToListlButton.add_Click($AddToListlButton_Click)
	#
	# DriverStorageTab
	#
	$DriverStorageTab.Controls.Add($textbox1)
	$DriverStorageTab.Controls.Add($labelPleaseNote)
	$DriverStorageTab.Controls.Add($PackagePathTextBox)
	$DriverStorageTab.Controls.Add($RepositoryTextBox)
	$DriverStorageTab.Controls.Add($PackagePathLabel)
	$DriverStorageTab.Controls.Add($RepositoryLabel)
	$DriverStorageTab.BackColor = 'WhiteSmoke'
	$DriverStorageTab.Location = '4, 26'
	$DriverStorageTab.Name = 'DriverStorageTab'
	$DriverStorageTab.Size = '651, 160'
	$DriverStorageTab.TabIndex = 2
	$DriverStorageTab.Text = 'Driver Storage Locations'
	#
	# textbox1
	#
	$textbox1.BackColor = 'WhiteSmoke'
	$textbox1.BorderStyle = 'None'
	$textbox1.Font = 'Microsoft Sans Serif, 8.25pt'
	$textbox1.Location = '300, 48'
	$textbox1.Multiline = $True
	$textbox1.Name = 'textbox1'
	$textbox1.ReadOnly = $True
	$textbox1.Size = '311, 100'
	$textbox1.TabIndex = 43
	$textbox1.TabStop = $False
	$textbox1.Text = 'UNC paths should be used at the root share level only.

The script will create subfolders for Makes, Models and driver
revisions.

Repository Path - Used for downloads and extractions
Package Path - Used for SCCM driver packages

'
	#
	# labelPleaseNote
	#
	$labelPleaseNote.AutoSize = $True
	$labelPleaseNote.Location = '300, 27'
	$labelPleaseNote.Name = 'labelPleaseNote'
	$labelPleaseNote.Size = '101, 17'
	$labelPleaseNote.TabIndex = 42
	$labelPleaseNote.Text = 'Please Note:'
	#
	# PackagePathTextBox
	#
	$PackagePathTextBox.CharacterCasing = 'Upper'
	$PackagePathTextBox.Font = 'Microsoft Sans Serif, 8.25pt'
	$PackagePathTextBox.Location = '18, 111'
	$PackagePathTextBox.Margin = '4, 3, 4, 3'
	$PackagePathTextBox.Name = 'PackagePathTextBox'
	$PackagePathTextBox.Size = '247, 23'
	$PackagePathTextBox.TabIndex = 39
	$PackagePathTextBox.Text = '\\SERVER\SHARE'
	#
	# RepositoryTextBox
	#
	$RepositoryTextBox.CharacterCasing = 'Upper'
	$RepositoryTextBox.Font = 'Microsoft Sans Serif, 8.25pt'
	$RepositoryTextBox.Location = '18, 57'
	$RepositoryTextBox.Margin = '4, 3, 4, 3'
	$RepositoryTextBox.Name = 'RepositoryTextBox'
	$RepositoryTextBox.Size = '247, 23'
	$RepositoryTextBox.TabIndex = 38
	$RepositoryTextBox.Text = '\\SERVER\SHARE'
	#
	# PackagePathLabel
	#
	$PackagePathLabel.AutoSize = $True
	$PackagePathLabel.ForeColor = 'Black'
	$PackagePathLabel.Location = '18, 92'
	$PackagePathLabel.Margin = '4, 0, 4, 0'
	$PackagePathLabel.Name = 'PackagePathLabel'
	$PackagePathLabel.Size = '108, 17'
	$PackagePathLabel.TabIndex = 41
	$PackagePathLabel.Text = 'Package Path'
	#
	# RepositoryLabel
	#
	$RepositoryLabel.AutoSize = $True
	$RepositoryLabel.ForeColor = 'Black'
	$RepositoryLabel.Location = '18, 39'
	$RepositoryLabel.Margin = '4, 0, 4, 0'
	$RepositoryLabel.Name = 'RepositoryLabel'
	$RepositoryLabel.Size = '124, 17'
	$RepositoryLabel.TabIndex = 40
	$RepositoryLabel.Text = 'Repository Path'
	#
	# DriverCleanTab
	#
	$DriverCleanTab.Controls.Add($labelCautionYourTaskSeque)
	$DriverCleanTab.Controls.Add($label1)
	$DriverCleanTab.Controls.Add($RemoveLegacyDriverCheckbox)
	$DriverCleanTab.Controls.Add($labelSelectingThisOptionW)
	$DriverCleanTab.Controls.Add($CleanUnusedCheckBox)
	$DriverCleanTab.BackColor = 'WhiteSmoke'
	$DriverCleanTab.Location = '4, 26'
	$DriverCleanTab.Name = 'DriverCleanTab'
	$DriverCleanTab.Padding = '3, 3, 3, 3'
	$DriverCleanTab.Size = '651, 160'
	$DriverCleanTab.TabIndex = 1
	$DriverCleanTab.Text = 'SCCM Driver Cleanup Options'
	#
	# labelCautionYourTaskSeque
	#
	$labelCautionYourTaskSeque.AutoSize = $True
	$labelCautionYourTaskSeque.ForeColor = 'DarkRed'
	$labelCautionYourTaskSeque.Location = '20, 19'
	$labelCautionYourTaskSeque.Name = 'labelCautionYourTaskSeque'
	$labelCautionYourTaskSeque.Size = '579, 17'
	$labelCautionYourTaskSeque.TabIndex = 4
	$labelCautionYourTaskSeque.Text = 'CAUTION: YOUR TASK SEQUENCES WILL NEED TO BE UPDATED MANUALLY'
	#
	# label1
	#
	$label1.AutoSize = $True
	$label1.Font = 'Microsoft Sans Serif, 8.25pt'
	$label1.ForeColor = 'Black'
	$label1.Location = '20, 125'
	$label1.Name = 'label1'
	$label1.Size = '503, 17'
	$label1.TabIndex = 3
	$label1.Text = 'Selecting this option will remove driver packages superseded during the import'
	#
	# RemoveLegacyDriverCheckbox
	#
	$RemoveLegacyDriverCheckbox.Location = '20, 98'
	$RemoveLegacyDriverCheckbox.Name = 'RemoveLegacyDriverCheckbox'
	$RemoveLegacyDriverCheckbox.Size = '242, 24'
	$RemoveLegacyDriverCheckbox.TabIndex = 2
	$RemoveLegacyDriverCheckbox.Text = 'Remove Superseded Driver Packages'
	$RemoveLegacyDriverCheckbox.UseVisualStyleBackColor = $True
	#
	# labelSelectingThisOptionW
	#
	$labelSelectingThisOptionW.AutoSize = $True
	$labelSelectingThisOptionW.Font = 'Microsoft Sans Serif, 8.25pt'
	$labelSelectingThisOptionW.ForeColor = 'Black'
	$labelSelectingThisOptionW.Location = '20, 74'
	$labelSelectingThisOptionW.Name = 'labelSelectingThisOptionW'
	$labelSelectingThisOptionW.Size = '483, 17'
	$labelSelectingThisOptionW.TabIndex = 1
	$labelSelectingThisOptionW.Text = 'Selecting this option will remove all drivers not associated with a driver pack'
	#
	# CleanUnusedCheckBox
	#
	$CleanUnusedCheckBox.Location = '20, 47'
	$CleanUnusedCheckBox.Name = 'CleanUnusedCheckBox'
	$CleanUnusedCheckBox.Size = '242, 24'
	$CleanUnusedCheckBox.TabIndex = 0
	$CleanUnusedCheckBox.Text = 'Cleanup Unused Drivers'
	$CleanUnusedCheckBox.UseVisualStyleBackColor = $True
	#
	# DeployEverythingcomLink
	#
	$DeployEverythingcomLink.ActiveLinkColor = 'SteelBlue'
	$DeployEverythingcomLink.Font = 'Microsoft Sans Serif, 10pt, style=Bold'
	$DeployEverythingcomLink.LinkColor = 'DarkGreen'
	$DeployEverythingcomLink.Location = '760, 624'
	$DeployEverythingcomLink.Margin = '4, 0, 4, 0'
	$DeployEverythingcomLink.Name = 'DeployEverythingcomLink'
	$DeployEverythingcomLink.Size = '202, 30'
	$DeployEverythingcomLink.TabIndex = 38
	$DeployEverythingcomLink.TabStop = $True
	$DeployEverythingcomLink.Text = 'DeployEverything.com'
	#
	# SCCMDellTabControl
	#
	$SCCMDellTabControl.Controls.Add($SCCMTabPage1)
	$SCCMDellTabControl.Controls.Add($SCCMTabPage4)
	$SCCMDellTabControl.Location = '28, 101'
	$SCCMDellTabControl.Margin = '4, 3, 4, 3'
	$SCCMDellTabControl.Name = 'SCCMDellTabControl'
	$SCCMDellTabControl.SelectedIndex = 0
	$SCCMDellTabControl.Size = '934, 94'
	$SCCMDellTabControl.TabIndex = 0
	#
	# SCCMTabPage1
	#
	$SCCMTabPage1.Controls.Add($SiteCodeText)
	$SCCMTabPage1.Controls.Add($SiteServerInput)
	$SCCMTabPage1.Controls.Add($ConnectSCCMButton)
	$SCCMTabPage1.Controls.Add($SiteCodeLabel)
	$SCCMTabPage1.Controls.Add($SiteServerLabel)
	$SCCMTabPage1.BackColor = 'WhiteSmoke'
	$SCCMTabPage1.ForeColor = 'SteelBlue'
	$SCCMTabPage1.Location = '4, 26'
	$SCCMTabPage1.Margin = '4, 3, 4, 3'
	$SCCMTabPage1.Name = 'SCCMTabPage1'
	$SCCMTabPage1.Padding = '4, 3, 4, 3'
	$SCCMTabPage1.Size = '926, 64'
	$SCCMTabPage1.TabIndex = 0
	$SCCMTabPage1.Text = 'SCCM Site Details'
	#
	# SiteCodeText
	#
	$SiteCodeText.CharacterCasing = 'Upper'
	$SiteCodeText.Enabled = $False
	$SiteCodeText.Font = 'Microsoft Sans Serif, 8.25pt'
	$SiteCodeText.ForeColor = 'Black'
	$SiteCodeText.Location = '357, 24'
	$SiteCodeText.Margin = '4, 3, 4, 3'
	$SiteCodeText.Name = 'SiteCodeText'
	$SiteCodeText.Size = '64, 23'
	$SiteCodeText.TabIndex = 10
	#
	# SiteServerInput
	#
	$SiteServerInput.CharacterCasing = 'Upper'
	$SiteServerInput.Font = 'Microsoft Sans Serif, 8.25pt'
	$SiteServerInput.ForeColor = 'Black'
	$SiteServerInput.Location = '105, 24'
	$SiteServerInput.Margin = '4, 3, 4, 3'
	$SiteServerInput.Name = 'SiteServerInput'
	$SiteServerInput.Size = '150, 23'
	$SiteServerInput.TabIndex = 8
	#
	# ConnectSCCMButton
	#
	$ConnectSCCMButton.BackColor = 'SteelBlue'
	$ConnectSCCMButton.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$ConnectSCCMButton.ForeColor = 'White'
	$ConnectSCCMButton.Location = '453, 24'
	$ConnectSCCMButton.Margin = '4, 3, 4, 3'
	$ConnectSCCMButton.Name = 'ConnectSCCMButton'
	$ConnectSCCMButton.Size = '157, 23'
	$ConnectSCCMButton.TabIndex = 5
	$ConnectSCCMButton.Text = 'Connect To SCCM'
	$ConnectSCCMButton.UseVisualStyleBackColor = $False
	$ConnectSCCMButton.add_Click($ConnectSCCMButton_Click)
	#
	# SiteCodeLabel
	#
	$SiteCodeLabel.AutoSize = $True
	$SiteCodeLabel.BackColor = 'WhiteSmoke'
	$SiteCodeLabel.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$SiteCodeLabel.Location = '271, 27'
	$SiteCodeLabel.Margin = '4, 0, 4, 0'
	$SiteCodeLabel.Name = 'SiteCodeLabel'
	$SiteCodeLabel.Size = '78, 17'
	$SiteCodeLabel.TabIndex = 11
	$SiteCodeLabel.Text = 'Site Code'
	#
	# SiteServerLabel
	#
	$SiteServerLabel.AutoSize = $True
	$SiteServerLabel.BackColor = 'WhiteSmoke'
	$SiteServerLabel.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$SiteServerLabel.Location = '8, 27'
	$SiteServerLabel.Margin = '4, 0, 4, 0'
	$SiteServerLabel.Name = 'SiteServerLabel'
	$SiteServerLabel.Size = '89, 17'
	$SiteServerLabel.TabIndex = 9
	$SiteServerLabel.Text = 'Site Server'
	#
	# SCCMTabPage4
	#
	$SCCMTabPage4.Controls.Add($UseProxyServerCheckbox)
	$SCCMTabPage4.Controls.Add($ProxyPswdInput)
	$SCCMTabPage4.Controls.Add($labelPassword)
	$SCCMTabPage4.Controls.Add($ProxyUserInput)
	$SCCMTabPage4.Controls.Add($labelUsername)
	$SCCMTabPage4.Controls.Add($ProxyServerInput)
	$SCCMTabPage4.Controls.Add($labelProxyServer)
	$SCCMTabPage4.BackColor = 'WhiteSmoke'
	$SCCMTabPage4.Location = '4, 26'
	$SCCMTabPage4.Margin = '4, 4, 4, 4'
	$SCCMTabPage4.Name = 'SCCMTabPage4'
	$SCCMTabPage4.Size = '926, 64'
	$SCCMTabPage4.TabIndex = 3
	$SCCMTabPage4.Text = 'Proxy Server Settings'
	#
	# UseProxyServerCheckbox
	#
	$UseProxyServerCheckbox.Location = '20, 19'
	$UseProxyServerCheckbox.Margin = '4, 4, 4, 4'
	$UseProxyServerCheckbox.Name = 'UseProxyServerCheckbox'
	$UseProxyServerCheckbox.Size = '176, 31'
	$UseProxyServerCheckbox.TabIndex = 20
	$UseProxyServerCheckbox.Text = 'Use A Proxy Server'
	$UseProxyServerCheckbox.UseVisualStyleBackColor = $True
	$UseProxyServerCheckbox.add_CheckedChanged($UseProxyServerCheckbox_CheckedChanged)
	#
	# ProxyPswdInput
	#
	$ProxyPswdInput.Enabled = $False
	$ProxyPswdInput.Font = 'Microsoft Sans Serif, 8.25pt'
	$ProxyPswdInput.ForeColor = 'Black'
	$ProxyPswdInput.Location = '653, 38'
	$ProxyPswdInput.Margin = '4, 3, 4, 3'
	$ProxyPswdInput.Name = 'ProxyPswdInput'
	$ProxyPswdInput.PasswordChar = '*'
	$ProxyPswdInput.Size = '150, 23'
	$ProxyPswdInput.TabIndex = 18
	#
	# labelPassword
	#
	$labelPassword.AutoSize = $True
	$labelPassword.BackColor = 'WhiteSmoke'
	$labelPassword.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelPassword.ForeColor = 'SteelBlue'
	$labelPassword.Location = '568, 41'
	$labelPassword.Margin = '4, 0, 4, 0'
	$labelPassword.Name = 'labelPassword'
	$labelPassword.Size = '77, 17'
	$labelPassword.TabIndex = 19
	$labelPassword.Text = 'Password'
	#
	# ProxyUserInput
	#
	$ProxyUserInput.Enabled = $False
	$ProxyUserInput.Font = 'Microsoft Sans Serif, 8.25pt'
	$ProxyUserInput.ForeColor = 'Black'
	$ProxyUserInput.Location = '653, 9'
	$ProxyUserInput.Margin = '4, 3, 4, 3'
	$ProxyUserInput.Name = 'ProxyUserInput'
	$ProxyUserInput.Size = '150, 23'
	$ProxyUserInput.TabIndex = 16
	#
	# labelUsername
	#
	$labelUsername.AutoSize = $True
	$labelUsername.BackColor = 'WhiteSmoke'
	$labelUsername.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelUsername.ForeColor = 'SteelBlue'
	$labelUsername.Location = '564, 12'
	$labelUsername.Margin = '4, 0, 4, 0'
	$labelUsername.Name = 'labelUsername'
	$labelUsername.Size = '81, 17'
	$labelUsername.TabIndex = 17
	$labelUsername.Text = 'Username'
	#
	# ProxyServerInput
	#
	$ProxyServerInput.CharacterCasing = 'Upper'
	$ProxyServerInput.Enabled = $False
	$ProxyServerInput.Font = 'Microsoft Sans Serif, 8.25pt'
	$ProxyServerInput.ForeColor = 'Black'
	$ProxyServerInput.Location = '313, 22'
	$ProxyServerInput.Margin = '4, 3, 4, 3'
	$ProxyServerInput.Name = 'ProxyServerInput'
	$ProxyServerInput.Size = '199, 23'
	$ProxyServerInput.TabIndex = 12
	$ProxyServerInput.Text = 'HTTP://SERVER:PORT'
	#
	# labelProxyServer
	#
	$labelProxyServer.AutoSize = $True
	$labelProxyServer.BackColor = 'WhiteSmoke'
	$labelProxyServer.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelProxyServer.ForeColor = 'SteelBlue'
	$labelProxyServer.Location = '204, 25'
	$labelProxyServer.Margin = '4, 0, 4, 0'
	$labelProxyServer.Name = 'labelProxyServer'
	$labelProxyServer.Size = '101, 17'
	$labelProxyServer.TabIndex = 13
	$labelProxyServer.Text = 'Proxy Server'
	#
	# labelThisScriptIsUsedAtYo
	#
	$labelThisScriptIsUsedAtYo.AutoSize = $True
	$labelThisScriptIsUsedAtYo.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelThisScriptIsUsedAtYo.Location = '28, 626'
	$labelThisScriptIsUsedAtYo.Margin = '4, 0, 4, 0'
	$labelThisScriptIsUsedAtYo.Name = 'labelThisScriptIsUsedAtYo'
	$labelThisScriptIsUsedAtYo.Size = '266, 17'
	$labelThisScriptIsUsedAtYo.TabIndex = 36
	$labelThisScriptIsUsedAtYo.Text = 'This script is used at your own risk.'
	#
	# ClearSelectionButton
	#
	$ClearSelectionButton.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$ClearSelectionButton.Location = '299, 397'
	$ClearSelectionButton.Margin = '4, 3, 4, 3'
	$ClearSelectionButton.Name = 'ClearSelectionButton'
	$ClearSelectionButton.Size = '264, 23'
	$ClearSelectionButton.TabIndex = 35
	$ClearSelectionButton.Text = 'Clear Selection'
	$ClearSelectionButton.UseVisualStyleBackColor = $True
	$ClearSelectionButton.add_Click($ClearSelectionButton_Click)
	#
	# ModelProgressOverlay
	#
	$ModelProgressOverlay.Location = '28, 594'
	$ModelProgressOverlay.Margin = '4, 3, 4, 3'
	$ModelProgressOverlay.Name = 'ModelProgressOverlay'
	$ModelProgressOverlay.Size = '934, 23'
	$ModelProgressOverlay.TabIndex = 30
	#
	# ProgressBar
	#
	$ProgressBar.Location = '28, 594'
	$ProgressBar.Margin = '4, 3, 4, 3'
	$ProgressBar.Name = 'ProgressBar'
	$ProgressBar.Size = '934, 23'
	$ProgressBar.Style = 'Continuous'
	$ProgressBar.TabIndex = 28
	#
	# ProgressListBox
	#
	$ProgressListBox.BackColor = 'WhiteSmoke'
	$ProgressListBox.FormattingEnabled = $True
	$ProgressListBox.ItemHeight = 17
	$ProgressListBox.Location = '28, 448'
	$ProgressListBox.Margin = '4, 3, 4, 3'
	$ProgressListBox.Name = 'ProgressListBox'
	$ProgressListBox.ScrollAlwaysVisible = $True
	$ProgressListBox.Size = '934, 106'
	$ProgressListBox.TabIndex = 27
	#
	# AboutToolLabel
	#
	$AboutToolLabel.AutoSize = $True
	$AboutToolLabel.Font = 'Microsoft Sans Serif, 9pt'
	$AboutToolLabel.Location = '134, 61'
	$AboutToolLabel.Margin = '4, 0, 4, 0'
	$AboutToolLabel.Name = 'AboutToolLabel'
	$AboutToolLabel.Size = '746, 18'
	$AboutToolLabel.TabIndex = 26
	$AboutToolLabel.Text = ' Automates the process of downloading, extracting and importing drivers and BIOS updates into SCCM and MDT'
	#
	# AutomationLabel
	#
	$AutomationLabel.AutoSize = $True
	$AutomationLabel.Font = 'Microsoft Sans Serif, 18pt, style=Bold'
	$AutomationLabel.ForeColor = 'SteelBlue'
	$AutomationLabel.Location = '134, 25'
	$AutomationLabel.Margin = '4, 0, 4, 0'
	$AutomationLabel.Name = 'AutomationLabel'
	$AutomationLabel.Size = '622, 36'
	$AutomationLabel.TabIndex = 25
	$AutomationLabel.Text = 'DeployEverything - Driver Automation Tool'
	#
	# picturebox1
	#
	#region Binary Data
	$picturebox1.Image = [System.Convert]::FromBase64String('
/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAICAgICAQICAgIDAgIDAwYEAwMDAwcFBQQGCAcJCAgH
CAgJCg0LCQoMCggICw8LDA0ODg8OCQsQERAOEQ0ODg7/2wBDAQIDAwMDAwcEBAcOCQgJDg4ODg4O
Dg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg7/wAARCABQAFADASIA
AhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQA
AAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3
ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWm
p6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEA
AwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSEx
BhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElK
U1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3
uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9efip
8XG8ParJ4d0GVBqSqPtVycHycjIUD+9j8q+LfHPx58HeEr5W8d+PLfT7yUb1iurlpZiPXy1DNj3x
ivJ/ix8VLvRPh3438cMRPfxxy3Maucgyu2Ez7bnXj0r8V9X1bUte8T3msaxey6jqd3KZbm4nbc8j
Huf8OgHFAH7d/wDDWvwL/wCilWv/AIB3f/xqj/hrX4F/9FKtf/AO7/8AjVfhoFLPxVlLfOOKAP3D
/wCGtPgZ/wBFJtf/AACu/wD41Sf8NafAz/opVr/4B3f/AMar8RRa8UG2+XpQB+3X/DWvwL/6KVa/
+Ad3/wDGqP8AhrX4F/8ARSrX/wAA7v8A+NV+HrwYFVipUHIoA/oQ8DfHnwd4tvmbwJ48t9QvIhva
K1uWimA9fLYK2PfGK+0vhX8XG8Q6rH4d16VDqTKfstyMDzsDJUj+9j86/ks0nV9S0HxFZaxo97Lp
2qWkoltrmB9rxsO4/kR0I4NftR8Jfirda78OvBPjlSIL+RIriRUOAJY32vj2LI3HpQB8xfGjWzdf
syeMbffnfBGMZ/6bx1+cqqWcCvpDWfH0Hir9nPW0MwXUBbxrcwk8hhKmSPY4rE/Z9+Bnib4+fHm0
8IaARZWaKJ9W1ORMx2UAOCx9WPRV7n6GgDxqGAswAGTXXt4S8Q22lC+udB1G3ssZ+0S2Uix49dxG
K/bvUPFf7Jv7C+kWeg6P4Zj8XfE5YFeR1ijn1Ikjh5JmGLcHqFXHHY9a9r/ZZ/a+m/aQ8feMNHl8
GR+GLXSLGK4jc3nnNMJHKbWGABjFOxNz+c9bMlRgUNZkJ0r6i+JV/p/hz/go18R9Ym0W31bT7Lxt
qJ/s6RAI2UXEigAYxxwQMY4Fehn9oPwcoyfhuD+MH/xFCSBt9j4LmtSARismaDAORX6BSftG+CIx
8/w1B/78f/E1ny/tM+AUzu+GZ/KD/wCJp2XcV32Pz8ZSrV+i3wS1s2v7MXhG3342RS8Z/wCm8lfP
nxn+MPhX4h+CbHS9E8ER6Fdw3Qla9ZY94XBGwbADg55z6VDoXj6Dwp+zjo0YmB1AwyrbQg8ljK/J
HoM5pFLU+ZopW86QBiN3BwevzCv2m/YynsPhH/wTB8dfFOO2SbWJkvL5iw5kW2jIhjz1wXBz9a/E
q2kze4/z1Ffrr+yL4k0zx1+wv4w+EV/cCK4VLm3dc/MILlCFcD/ZbP4047ilsfnjqWs6t4n8aap4
h16+k1LWtRunub26mbLSyOck/wCA6AYFfp3/AME0rgWnxf8AiYwON2jWw/8AIzV+Z/iDwzrPgv4g
6n4a1+1a01OxmMcqkcMOzqe6kcg+hr7W/Ym+J3g/4c/FLxhJ4u1628PwajpkUdtPdttjZkkLFS3Q
HB4z1pLcHseP/GRBN+2H8VZOu7xfqR/8mpK4rTvD0+sSzRwTW1qsShnluZdiDPQd+fwrX8e6/ZeI
Pj34317TZTPp2o+IL26tZCpXfHJcO6Ng8jKkHn1rlGvpYo2MT7M9RtBB/A1z1vbeyfsrc3S+xyYr
619Wl9Vt7S2nNe1/O2ptXHw41CQYXWdGP/b6f/ia5PXPh3qunaBdag+o6XcxQJueOC83OR7AgZpL
jW7+MZWVP+/Kf4Vzep6/qVzp8ttLMhhcYYLEqkj6gV4sHnXOudQt11ex8hRXGHtY+1dHlur2Ur26
213scHdKM1gSSsJUBJIXIGT0+Y1v3LZNclcSYvMe/wDU19CfeFOxkzqSj/PWvZfh34/1/wCHHxJs
vEvhy58m7hO2WJs+XcRn7yOPQ/pXh2mvu1mMe9dqpKuKAP1GT4l/AL4/eHLODx2sHhzxJHHtWS7n
FvLEe4jnPysuezflT7b9mX4STnzbf4izLC3Kbbm3cY+uea/MaGbB61pRvCcExoT7qKq/cjltsz9Q
Iv2YPhSQP+Lkzg/9dbf/ABqx/wAMsfCh1wfidP8A9/Lf/wCKr8xRJBgfuU/75FDSQFP9TH/3yKLr
sOz7n6Zy/sl/CSQc/FC4H/bS3/8Aiqyp/wBkD4QODn4o3X/fy3/+Kr805mhK58pP++RWTMYyD8i/
98ii67BZ9z6z/aC+BHgD4XfDaw1nwz4+Ou6jPeCE6fM0RdkIJLrsOcDAzn1r4WvJMaiw9/611BAy
SFA+gri9RfGsSD3/AK0mNGt4r8P6j8Pvjr4l8I6zC8GpaDrFxp93G4IIeGVoz+B25B9K20lSWNZI
2DIRkEV+6f8AwUK/4J7a58WfG178a/gnZxXPjWaIf8JB4f3rGdTKLtWaJjgebtABBI3YHOev4D+J
PC/jz4e+I5tG8XeG9Z8I6nExWS01bT5LZwR7OBke44NIZ1QchsirCXBGK8t/tm//AOfhqP7Zv/8A
n4agD1v7XxSG6O2vJv7a1D/n4aj+2tQ/5+GoA9RefIquzlhzXmv9s3//AD8NR/bN/wD8/DUAeiSS
pFA0kjBVXkk1ieE/D+o/EH46eGvCOjQvPqevaxb6faRoMkvNKsY/Absk+lVvDfhfx58QvEUGjeEf
DWs+LtSlYLHaaTp8ly5J9kBwPc8Cv34/4J6/8E9tc+E3jay+Nfxss4rbxrDEf+Ef8P71kOmF12tN
KwyPN2kgAE7cnnPQA//Z')
	#endregion
	$picturebox1.Location = '40, 12'
	$picturebox1.Margin = '4, 3, 4, 3'
	$picturebox1.Name = 'picturebox1'
	$picturebox1.Size = '70, 70'
	$picturebox1.SizeMode = 'StretchImage'
	$picturebox1.TabIndex = 24
	$picturebox1.TabStop = $False
	#
	# ProductListBox
	#
	$ProductListBox.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$ProductListBox.ForeColor = 'SteelBlue'
	$ProductListBox.FormattingEnabled = $True
	$ProductListBox.ItemHeight = 17
	$ProductListBox.Location = '28, 221'
	$ProductListBox.Margin = '4, 3, 4, 3'
	$ProductListBox.Name = 'ProductListBox'
	$ProductListBox.SelectionMode = 'MultiExtended'
	$ProductListBox.Size = '264, 191'
	$ProductListBox.Sorted = $True
	$ProductListBox.TabIndex = 3
	#
	# StartDownloadButton
	#
	$StartDownloadButton.Anchor = 'None'
	$StartDownloadButton.BackColor = 'SteelBlue'
	$StartDownloadButton.Enabled = $False
	$StartDownloadButton.FlatAppearance.BorderSize = 0
	$StartDownloadButton.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$StartDownloadButton.ForeColor = 'White'
	$StartDownloadButton.Location = '599, 397'
	$StartDownloadButton.Margin = '4, 3, 4, 3'
	$StartDownloadButton.Name = 'StartDownloadButton'
	$StartDownloadButton.Size = '359, 23'
	$StartDownloadButton.TabIndex = 0
	$StartDownloadButton.Text = 'Start Download and Import Process'
	$StartDownloadButton.UseVisualStyleBackColor = $False
	$StartDownloadButton.add_Click($StartDownloadButton_Click)
	#
	# ModelListBox
	#
	$ModelListBox.AutoSize = $True
	$ModelListBox.BackColor = 'Transparent'
	$ModelListBox.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$ModelListBox.Location = '28, 201'
	$ModelListBox.Margin = '4, 0, 4, 0'
	$ModelListBox.Name = 'ModelListBox'
	$ModelListBox.Size = '84, 17'
	$ModelListBox.TabIndex = 4
	$ModelListBox.Text = 'Import List'
	#
	# LoggingLabel
	#
	$LoggingLabel.AutoSize = $True
	$LoggingLabel.BackColor = 'Transparent'
	$LoggingLabel.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$LoggingLabel.Location = '28, 428'
	$LoggingLabel.Margin = '4, 0, 4, 0'
	$LoggingLabel.Name = 'LoggingLabel'
	$LoggingLabel.Size = '129, 17'
	$LoggingLabel.TabIndex = 34
	$LoggingLabel.Text = 'Job Process Log'
	#
	# ModelProgressLabel
	#
	$ModelProgressLabel.AutoSize = $True
	$ModelProgressLabel.BackColor = 'Transparent'
	$ModelProgressLabel.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$ModelProgressLabel.Location = '28, 574'
	$ModelProgressLabel.Margin = '4, 0, 4, 0'
	$ModelProgressLabel.Name = 'ModelProgressLabel'
	$ModelProgressLabel.Size = '121, 17'
	$ModelProgressLabel.TabIndex = 32
	$ModelProgressLabel.Text = 'Model Progress'
	#
	# OpenMDTFileDialog
	#
	$SCCMTabPage4.ResumeLayout()
	$SCCMTabPage1.ResumeLayout()
	$SCCMDellTabControl.ResumeLayout()
	$DriverCleanTab.ResumeLayout()
	$DriverStorageTab.ResumeLayout()
	$ManufacturerTab.ResumeLayout()
	$OSSelectionTab.ResumeLayout()
	$SelectionTabs.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	#$ErrorActionPreference = 'SilentlyContinue'
	#$WarningPreference = 'SilentlyContinue'
	
	
	# // =================== DELL VARIABLES ================ //
	
	# Define Dell Download Sources
	$DellDownloadList = "http://downloads.dell.com/published/Pages/index.html"
	$DellDownloadBase = "http://downloads.dell.com"
	$DellDriverListURL = "http://en.community.dell.com/techcenter/enterprise-client/w/wiki/2065.dell-command-deploy-driver-packs-for-enterprise-client-os-deployment"
	$DellBaseURL = "http://en.community.dell.com"
	
	# Define Dell Download Sources
	$DellXMLCabinetSource = "http://downloads.dell.com/catalog/DriverPackCatalog.cab"
	
	# Define Dell Cabinet/XL Names and Paths
	$DellCabFile = [string]($DellXMLCabinetSource | Split-Path -Leaf)
	$DellXMLFile = $DellCabFile.Trim(".cab")
	$DellXMLFile = $DellXMLFile + ".xml"
	
	# // =================== HP VARIABLES ================ //
	
	# Define HP Download Sources
	$HPXMLCabinetSource = "http://ftp.hp.com/pub/caps-softpaq/cmit/HPClientDriverPackCatalog.cab"
	
	# Define HP Cabinet/XL Names and Paths
	$HPCabFile = [string]($HPXMLCabinetSource | Split-Path -Leaf)
	$HPXMLFile = $HPCabFile.Trim(".cab")
	$HPXMLFile = $HPXMLFile + ".xml"
	
	# // =================== LENOVO VARIABLES ================ //
	
	# Define Lenovo Download Sources
	$LenovoXMLSource = "https://download.lenovo.com/cdrt/td/catalog.xml"
	
	# Define Lenovo Cabinet/XL Names and Paths
	$LenovoXMLFile = [string]($LenovoXMLSource | Split-Path -Leaf)
	
	# ArrayList to store the Dell models in
	$LenovoProducts = New-Object -TypeName System.Collections.ArrayList
	
	# // =================== COMMON VARIABLES ================ //
	
	# ArrayList to store models in
	$DellProducts = New-Object -TypeName System.Collections.ArrayList
	$DellKnownProducts = New-Object -TypeName System.Collections.ArrayList
	$HPProducts = New-Object -TypeName System.Collections.ArrayList
	
	# Log File Location
	$LogFile = "$env:TEMP\DeployEverythingDriverToolLog.txt"
	
	# MDT PS Commandlets
	$MDTPSCommandlets = "C:\Program Files\Microsoft Deployment Toolkit\bin\MicrosoftDeploymentToolkit.psd1"
	
	# Proxy Validation Initial State
	$ProxyValidated = $false
	
	# Query SCCM Site Code
	function QuerySiteCode ($SiteServer)
	{
		$SiteCodeObjects = Get-WmiObject -Namespace "root\SMS" -Class SMS_ProviderLocation -ComputerName $SiteServer -ErrorAction Stop
		if ($SiteCodeObjects -gt $null)
		{
			foreach ($SiteCodeObject in $SiteCodeObjects)
			{
				if ($SiteCodeObject.ProviderForLocalSite -eq $true)
				{
					$SiteCode = $SiteCodeObject.SiteCode
					$ProgressListBox.Items.Add("Site Code Found: $($SiteCode)")
					$SiteCodeText.text = $SiteCode
				}
			}
		}
		else
		{
			$ProgressListBox.ForeColor = "Red"
			$ProgressListBox.Items.Add(" ")
			$ProgressListBox.Items.Add("Error Site Code Not Found: Please check your security rights to the $SiteServer server.")
			
		}
		UpdateLogWindow
	}
	
	function UpdateLogWindow
	{
		$ProgressListBox.SelectedIndex = $ProgressListBox.Items.Count - 1;
		$ProgressListBox.SelectedIndex = -1;
	}
	
	# Find / Refresh HP Models
	function UpdateModeList
	{
		param (
			[string]$SiteServer,
			[string]$SiteCode
			)
		
		
		# Rest Product Listbox
		$FullModelListBox.Items.Clear()
		
		# Check for Proxy use and set variables
		if ($ProxyValidated -eq $false)
		{
			if (($UseProxyServerCheckbox.Checked -eq $true) -and ($ProxyValidated -eq $false))
			{
				$ProxyUser = [string]$ProxyUserInput.Text
				$ProxyPswd = ConvertTo-SecureString $ProxyPswdInput.Text -AsPlainText -Force
				$ProxyServer = [string]$ProxyServerInput.Text
				$ProxyCred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $ProxyUser, $ProxyPswd
				$ProxyCheck = Invoke-WebRequest -Uri $HPXMLCabinetSource -Proxy $ProxyServer -ProxyUseDefaultCredentials
				# Try credential method if pass through fails
				if ($ProxyCheck -eq $null)
				{
					$ProxyCheck = Invoke-WebRequest -Uri $HPXMLCabinetSource -Proxy $ProxyServer -ProxyCredential $ProxyCred
				}
				if ($ProxyCheck.StatusDescription -eq "OK")
				{
					$ProgressListBox.ForeColor = "Black"
					$ProgressListBox.Items.Add("======== Validating Proxy ======== ")
					$ProgressListBox.Items.Add(" ")
					$ProgressListBox.Items.Add("PROXY: Connection to HP Cab site validated via proxy $ProxyServer ")
					$ProgressListBox.Items.Add(" ")
					$ProxyError = $false
					UpdateLogWindow
				}
				else
				{
					$ProgressListBox.ForeColor = "Red"
					$ProgressListBox.Items.Add("PROXY: Error. Please Check Proxy Server Details Are Valid ")
					$ProxyError = $true
					UpdateLogWindow
				}
			}
		}
		
		if ($ProxyError -ne $true)
		{
			if ($HPCheckBox.Checked -eq $true)
			{
				
				If ((Test-Path -Path $env:TEMP\$HPCabFile) -eq $false)
				{
					$ProgressListBox.Items.Add("======== Downloading HP Product List ======== ")
					$ProgressListBox.Items.Add(" ")
					# Download HP Model Cabinet File
					$ProgressListBox.Items.Add("Downloading HP Driver Pack Cabinet File from $HPXMLCabinetSource")
					if ($ProxyCheck.Description -eq "OK")
					{
						Start-BitsTransfer -Source $HPXMLCabinetSource -Destination $env:TEMP -RetryInterval 60 -RetryTimeout 180 -ProxyAuthentication NTLM -ProxyCredential $ProxyCred -ProxyUsage SystemDefault -Priority Foreground
					}
					else
					{
						Start-BitsTransfer -Source $HPXMLCabinetSource -Destination $env:TEMP -RetryInterval 60 -RetryTimeout 180
					}
					
					# Expand Cabinet File
					$ProgressListBox.Items.Add(" ")
					$ProgressListBox.Items.Add("Expanding HP Driver Pack Cabinet File: $HPXMLFile")
					UpdateLogWindow
					Expand "$env:TEMP\$HPCabFile" -F:* "$env:TEMP\$HPXMLFile"
				}
				
				# Read XML File
				$ProgressListBox.Items.Add("Reading Driver Pack XML File...")
				UpdateLogWindow
				[xml]$HPModelXML = Get-Content -Path $env:TEMP\$HPXMLFile
				# Set XML Object
				$HPModelXML.GetType().FullName
				$HPModelSoftPaqs = $HPModelXML.newdataset.hpclientdriverpackcatalog.softpaqlist.softpaq
				# Find Models Contained Within Downloaded XML
				$HPModels = ($HPModelSoftPaqs).name | Where-Object { ($_ -like "*Win*$(($OSComboBox.Text).split(' ')[1])*$(($ArchitectureComboxBox.Text).Split(' ')[0])*") }
				if ($HPModels -ne $null)
				{
					foreach ($Model in $HPModels)
					{
						$Model = $Model -replace "Win[^;]*", " "
						
						if ($Model -notin $HPProducts)
						{
							$HPProducts.Add($Model.Model) | Out-Null
							$FullModelListBox.Items.Add($Model)
						}
					}
					$StartDownloadButton.Enabled = $true
				}
				$FullModelListBox.Sorted
				if (($HPModels).Count -gt "0")
				{
					$ProgressListBox.Items.Add("INFO: Found $(($HPModels).count) HP Model Driver Packs for $($OSComboBox.text) $($ArchitectureComboxBox.text)")
					$ProgressListBox.Items.Add(" ")
					UpdateLogWindow
				}
				else
				{
					$ProgressListBox.Items.Add("INFO: No HP Models Found. If you are using a proxy server please specify the proxy in the Proxy Server Settings tab.")
					$ProgressListBox.Items.Add(" ")
					UpdateLogWindow
				}
			}
			
			if ($DellCheckBox.Checked -eq $true)
			{
				
				If ((Test-Path -Path $env:TEMP\$DellCabFile) -eq $false)
				{
					$ProgressListBox.Items.Add("======== Downloading Dell Product List ======== ")
					$ProgressListBox.Items.Add(" ")
					# Download Dell Model Cabinet File
					$ProgressListBox.Items.Add("Downloading Dell Driver Pack Cabinet File from $DellXMLCabinetSource")
					if ($ProxyCheck.Description -eq "OK")
					{
						Start-BitsTransfer -Source $DellXMLCabinetSource -Destination $env:TEMP -RetryInterval 60 -RetryTimeout 180 -ProxyAuthentication NTLM -ProxyCredential $ProxyCred -ProxyUsage SystemDefault -Priority Foreground
					}
					else
					{
						Start-BitsTransfer -Source $DellXMLCabinetSource -Destination $env:TEMP -RetryInterval 60 -RetryTimeout 180
					}
					
					# Expand Cabinet File
					$ProgressListBox.Items.Add(" ")
					$ProgressListBox.Items.Add("Expanding Dell Driver Pack Cabinet File: $DellXMLFile")
					UpdateLogWindow
					Expand "$env:TEMP\$DellCabFile" -F:* "$env:TEMP\$DellXMLFile"
				}
				
				# Read XML File
				$ProgressListBox.Items.Add("Reading Driver Pack XML File...")
				UpdateLogWindow
				[xml]$DellModelXML = Get-Content -Path $env:TEMP\$DellXMLFile
				# Set XML Object
				$DellModelXML.GetType().FullName
				$DellModelCabFiles = $DellModelXML.driverpackmanifest.driverpackage
				# Find Models Contained Within Downloaded XML	
				$DellModels = $DellModelCabFiles | Where-Object { ((($_.SupportedOperatingSystems).OperatingSystem).osCode -like "*$(($OSComboBox.Text).split(' ')[1])*") }  |  Select-Object @{ Expression = { $_.SupportedSystems.Brand.Model.name }; Label = "SystemName"; } –unique 
				if ($DellModels -ne $null)
				{
					foreach ($Model in $DellModels.SystemName)
					{
						if ($Model -ne $null)
						{
							# $Model = $Model -replace "Win[^;]*", " "
							$Model = "Dell " + $Model
							
							if ($Model -notin $DellProducts)
							{
								$DellProducts.Add($Model.Model) | Out-Null
								$FullModelListBox.Items.Add($Model)
							}
						}
					}
					$StartDownloadButton.Enabled = $true
				}
				
				# Add Known Models
				$DellKnownModels = Get-WmiObject -ComputerName $SiteServer -Namespace "root\SMS\site_$SiteCode" -Class SMS_G_System_COMPUTER_SYSTEM | Select-Object -Property Model | Where-Object { ($_.Model -like "*Optiplex*") -or ($_.Model -like "*Latitude*") -or ($_.Model -like "*Precision*") -or ($_.innerText -like "XPS*") }
				# Add model to ArrayList if not present
				if ($DellKnownModels -ne $null)
				{
					foreach ($DellKnownModel in $DellKnownModels)
					{
						$DellKnownModel = "Dell " + $DellKnownModel.Model
						
						if ($DellKnownModel -notin $DellKnownProducts)
						{
							$DellKnownProducts.Add($DellKnownModel) | Out-Null
							$ProductListBox.Items.Add($DellKnownModel)
						}
					}
					$ProgressListBox.Items.Add(" ")
					$ProgressListBox.Items.Add("INFO: Found: $(($DellKnownProducts).count) Known Dell Models")
					$ProgressListBox.Items.Add(" ")
				}
				
				$FullModelListBox.Sorted
				if (($DellModels).Count -gt "0")
				{
					$ProgressListBox.Items.Add("INFO: Found $(($DellModels).count) Dell Model Driver Packs for $($OSComboBox.text) $($ArchitectureComboxBox.text)")
					$ProgressListBox.Items.Add(" ")
					UpdateLogWindow
				}
				else
				{
					$ProgressListBox.Items.Add("INFO: No Dell Models Found. If you are using a proxy server please specify the proxy in the Proxy Server Settings tab.")
					$ProgressListBox.Items.Add(" ")
					UpdateLogWindow
				}
			}
			
			if ($LenovoCheckBox.Checked -eq $true)
			{
				if ($ProxyValidated -eq $true)
				{
					# Try both credential and default methods
					[xml]$LenovoModelXML = Invoke-WebRequest -Uri $LenovoXMLSource -Proxy $ProxyServer -ProxyUseDefaultCredentials
					If ($LenovoModelXML -eq $null)
					{
						[xml]$LenovoModelXML = Invoke-WebRequest -Uri $LenovoXMLSource -Proxy $ProxyServer -ProxyCredential $ProxyCred
					}
				}
				else
				{
					[xml]$LenovoModelXML = Invoke-WebRequest -Uri $LenovoXMLSource
				}
				# Read XML File
				$ProgressListBox.Items.Add("Reading Driver Pack XML File...")
				
				# Set XML Object
				$LenovoModelXML.GetType().FullName
				$LenovoModelDriver = $LenovoModelXML.Products
				# Find Models Contained Within Downloaded XML
				If ($OSComboBox.Text -like "Windows 10")
				{
					$OSSelected = "Win10"
					$LenovoModels = ($LenovoModelDriver).Product | Where-Object { ($_.OS -like $OSSelected) }
				}
				If ($OSComboBox.Text -like "Windows 8.1")
				{
					$OSSelected = "Win81"
					$LenovoModels = ($LenovoModelDriver).Product | Where-Object { ($_.OS -like $OSSelected) }
				}
				If ($OSComboBox.Text -like "Windows 7")
				{
					$LenovoModels = ($LenovoModelDriver).Product | Where-Object { ($_.OS -like "*Win*$(($OSComboBox.Text).split(' ')[1])*$(($ArchitectureComboxBox.Text).Split(' ')[0])*") }
				}
				if ($LenovoModels -ne $null)
				{
					foreach ($Model in $LenovoModels.Model)
					{
						$Model = $Model -replace "Win[^;]*", " "
						$Model = "Lenovo " + $Model 
						
						if ($Model -notin $LenovoProducts)
						{
							$LenovoProducts.Add($Model.Model) | Out-Null
							$FullModelListBox.Items.Add($Model)
						}
					}
					$StartDownloadButton.Enabled = $true
				}
				$FullModelListBox.Sorted
				if (($LenovoModels).Count -gt "0")
				{
					$ProgressListBox.Items.Add("INFO: Found $(($LenovoModels).count) Lenovo Model Driver Packs for $($OSComboBox.text) $($ArchitectureComboxBox.text)")
					$ProgressListBox.Items.Add(" ")
					UpdateLogWindow
				}
				else
				{
					$ProgressListBox.Items.Add("INFO: No Lenovo Models Found. If you are using a proxy server please specify the proxy in the Proxy Server Settings tab.")
					$ProgressListBox.Items.Add(" ")
					UpdateLogWindow
				}
			}
			$AddToListlButton.enabled = $true
		}
		
	}
	
	function FindDriver
	{
		<# ============ Find Driver Function Provided Courtesy Of Lenovo ===================
		 # This powershell file will extract the link for the specified driver pack or application
		 # param $URI The string version of the URL
		 # param $64bit A boolean to determine what version to pick if there are multiple
		 #
		 # v1.1 Fixes multiple script tag issue
		 #>
		param (
			[string]$URI,
			[string]$OSArchitecture,
			$ProxyServer,
			$ProxyCred
		)
		
		# set 32 or 64bit swtich
		if ($OSArchitecture -eq "x86")
		{
			$64bit = $true
		}
		else
		{
			$64bit = $false
		}
		
		#Case for direct link to a zip file
		if ($URI.EndsWith(".zip"))
		{
			return $URI
		}
		
		$err = @()
		
		#Get the content of the website
		if ($ProxyCred -gt $null)
		{
			$html = Invoke-WebRequest –Uri $URI -Proxy $ProxyServer -ProxyUseDefaultCredentials
			# Fall back to using specified credentials
			if ($html -eq $null)
			{
				$html = Invoke-WebRequest –Uri $URI -Proxy $ProxyServer -ProxyCredential $ProxyCred
			}
		}
		else
		{
			$html = Invoke-WebRequest –Uri $URI
		}
		
		#Create an array to hold all the links to exe files
		$anchors = @()
		
		#determine if the URL resolves to the old download location
		if ($URI -like "*olddownloads*")
		{
			#Quickly grab the links that end with exe
			$anchors = (($html.Links | Where-Object { $_.href -like "*exe" }) | Where class -eq "downloadBtn").href
		}
		
		#new download page style
		else
		{
			#everything is embedded in script tags that are parsed to fill in the page
			#grab all the script tags that have a exe link in them
			$tags = ($html.ParsedHtml.getElementsByTagName("script") | Where-Object { $_.text -like "*.exe*" })
			
			#we need to work backwards to parse the tags
			$currentIndex = $tags.text.Length
			
			do
			{
				#find the farthest occurance of exe in the script tag
				$farthestEXE = $tags.text.lastIndexOf(".exe`"", $currentIndex)
				
				#we are done if it returns -1
				if ($farthestEXE -gt -1)
				{
					#all the urls are prepended with "URL" so find the one right before our exe
					$farthestURL = ($tags.text.lastIndexOf("`"URL`"", $farthestEXE))
					#snag the link
					$anchors += ($tags.text.Substring($farthestURL + 7, $farthestEXE - $farthestURL - 3))
					#move our pointer to the beginning of the URL
					$currentIndex = $farthestURL
				}
			}
			while ($farthestEXE -gt 0)
		}
		
		if ($anchors.Count -eq 0)
		{
			return "badLink"
		}
		
		#if we only found one link return it
		if ($anchors.Count -eq 1)
		{
			return $anchors[0]
		}
		#if there are multiple links then pick based on $64bit
		if ($anchors.Count -gt 1)
		{
			foreach ($anchor in $anchors)
			{
				if ((($anchor -like "*64_*" -or $anchor -like "*_64*") -and $64bit) -or (($anchor -like "*32_*" -or $anchor -like "*_32*") -and (-not $64bit)))
				{
					return $anchor
				}
			}
		}
	}
	
	
	
#endregion Source: Globals.ps1

#Start the application
Main ($CommandLine)
